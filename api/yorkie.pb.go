// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/yorkie.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ValueType int32

const (
	ValueType_NULL        ValueType = 0
	ValueType_BOOLEAN     ValueType = 1
	ValueType_INTEGER     ValueType = 2
	ValueType_LONG        ValueType = 3
	ValueType_DOUBLE      ValueType = 4
	ValueType_STRING      ValueType = 5
	ValueType_BYTES       ValueType = 6
	ValueType_DATE        ValueType = 7
	ValueType_JSON_OBJECT ValueType = 8
	ValueType_JSON_ARRAY  ValueType = 9
	ValueType_TEXT        ValueType = 10
	ValueType_RICH_TEXT   ValueType = 11
	ValueType_INTEGER_CNT ValueType = 12
	ValueType_LONG_CNT    ValueType = 13
	ValueType_DOUBLE_CNT  ValueType = 14
)

var ValueType_name = map[int32]string{
	0:  "NULL",
	1:  "BOOLEAN",
	2:  "INTEGER",
	3:  "LONG",
	4:  "DOUBLE",
	5:  "STRING",
	6:  "BYTES",
	7:  "DATE",
	8:  "JSON_OBJECT",
	9:  "JSON_ARRAY",
	10: "TEXT",
	11: "RICH_TEXT",
	12: "INTEGER_CNT",
	13: "LONG_CNT",
	14: "DOUBLE_CNT",
}

var ValueType_value = map[string]int32{
	"NULL":        0,
	"BOOLEAN":     1,
	"INTEGER":     2,
	"LONG":        3,
	"DOUBLE":      4,
	"STRING":      5,
	"BYTES":       6,
	"DATE":        7,
	"JSON_OBJECT": 8,
	"JSON_ARRAY":  9,
	"TEXT":        10,
	"RICH_TEXT":   11,
	"INTEGER_CNT": 12,
	"LONG_CNT":    13,
	"DOUBLE_CNT":  14,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}

func (ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{0}
}

type DocEventType int32

const (
	DocEventType_DOCUMENTS_CHANGED   DocEventType = 0
	DocEventType_DOCUMENTS_WATCHED   DocEventType = 1
	DocEventType_DOCUMENTS_UNWATCHED DocEventType = 2
	DocEventType_METADATA_CHANGED    DocEventType = 3
)

var DocEventType_name = map[int32]string{
	0: "DOCUMENTS_CHANGED",
	1: "DOCUMENTS_WATCHED",
	2: "DOCUMENTS_UNWATCHED",
	3: "METADATA_CHANGED",
}

var DocEventType_value = map[string]int32{
	"DOCUMENTS_CHANGED":   0,
	"DOCUMENTS_WATCHED":   1,
	"DOCUMENTS_UNWATCHED": 2,
	"METADATA_CHANGED":    3,
}

func (x DocEventType) String() string {
	return proto.EnumName(DocEventType_name, int32(x))
}

func (DocEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{1}
}

type BroadcastEventRequest struct {
	PublisherId          []byte    `protobuf:"bytes,1,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"`
	Event                *DocEvent `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BroadcastEventRequest) Reset()         { *m = BroadcastEventRequest{} }
func (m *BroadcastEventRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastEventRequest) ProtoMessage()    {}
func (*BroadcastEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{0}
}
func (m *BroadcastEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastEventRequest.Merge(m, src)
}
func (m *BroadcastEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastEventRequest proto.InternalMessageInfo

func (m *BroadcastEventRequest) GetPublisherId() []byte {
	if m != nil {
		return m.PublisherId
	}
	return nil
}

func (m *BroadcastEventRequest) GetEvent() *DocEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

type BroadcastEventResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BroadcastEventResponse) Reset()         { *m = BroadcastEventResponse{} }
func (m *BroadcastEventResponse) String() string { return proto.CompactTextString(m) }
func (*BroadcastEventResponse) ProtoMessage()    {}
func (*BroadcastEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{1}
}
func (m *BroadcastEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastEventResponse.Merge(m, src)
}
func (m *BroadcastEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastEventResponse proto.InternalMessageInfo

type ActivateClientRequest struct {
	ClientKey            string   `protobuf:"bytes,1,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivateClientRequest) Reset()         { *m = ActivateClientRequest{} }
func (m *ActivateClientRequest) String() string { return proto.CompactTextString(m) }
func (*ActivateClientRequest) ProtoMessage()    {}
func (*ActivateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{2}
}
func (m *ActivateClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivateClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivateClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivateClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateClientRequest.Merge(m, src)
}
func (m *ActivateClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *ActivateClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateClientRequest proto.InternalMessageInfo

func (m *ActivateClientRequest) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

type ActivateClientResponse struct {
	ClientKey            string   `protobuf:"bytes,1,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ClientId             []byte   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivateClientResponse) Reset()         { *m = ActivateClientResponse{} }
func (m *ActivateClientResponse) String() string { return proto.CompactTextString(m) }
func (*ActivateClientResponse) ProtoMessage()    {}
func (*ActivateClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{3}
}
func (m *ActivateClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivateClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivateClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivateClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateClientResponse.Merge(m, src)
}
func (m *ActivateClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *ActivateClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateClientResponse proto.InternalMessageInfo

func (m *ActivateClientResponse) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

func (m *ActivateClientResponse) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

type DeactivateClientRequest struct {
	ClientId             []byte   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeactivateClientRequest) Reset()         { *m = DeactivateClientRequest{} }
func (m *DeactivateClientRequest) String() string { return proto.CompactTextString(m) }
func (*DeactivateClientRequest) ProtoMessage()    {}
func (*DeactivateClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{4}
}
func (m *DeactivateClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeactivateClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeactivateClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeactivateClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeactivateClientRequest.Merge(m, src)
}
func (m *DeactivateClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeactivateClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeactivateClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeactivateClientRequest proto.InternalMessageInfo

func (m *DeactivateClientRequest) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

type DeactivateClientResponse struct {
	ClientId             []byte   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeactivateClientResponse) Reset()         { *m = DeactivateClientResponse{} }
func (m *DeactivateClientResponse) String() string { return proto.CompactTextString(m) }
func (*DeactivateClientResponse) ProtoMessage()    {}
func (*DeactivateClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{5}
}
func (m *DeactivateClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeactivateClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeactivateClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeactivateClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeactivateClientResponse.Merge(m, src)
}
func (m *DeactivateClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeactivateClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeactivateClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeactivateClientResponse proto.InternalMessageInfo

func (m *DeactivateClientResponse) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

type AttachDocumentRequest struct {
	ClientId             []byte      `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ChangePack           *ChangePack `protobuf:"bytes,2,opt,name=change_pack,json=changePack,proto3" json:"change_pack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AttachDocumentRequest) Reset()         { *m = AttachDocumentRequest{} }
func (m *AttachDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*AttachDocumentRequest) ProtoMessage()    {}
func (*AttachDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{6}
}
func (m *AttachDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttachDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttachDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttachDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachDocumentRequest.Merge(m, src)
}
func (m *AttachDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *AttachDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttachDocumentRequest proto.InternalMessageInfo

func (m *AttachDocumentRequest) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *AttachDocumentRequest) GetChangePack() *ChangePack {
	if m != nil {
		return m.ChangePack
	}
	return nil
}

type AttachDocumentResponse struct {
	ClientId             []byte      `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ChangePack           *ChangePack `protobuf:"bytes,2,opt,name=change_pack,json=changePack,proto3" json:"change_pack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AttachDocumentResponse) Reset()         { *m = AttachDocumentResponse{} }
func (m *AttachDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*AttachDocumentResponse) ProtoMessage()    {}
func (*AttachDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{7}
}
func (m *AttachDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttachDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttachDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttachDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachDocumentResponse.Merge(m, src)
}
func (m *AttachDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *AttachDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttachDocumentResponse proto.InternalMessageInfo

func (m *AttachDocumentResponse) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *AttachDocumentResponse) GetChangePack() *ChangePack {
	if m != nil {
		return m.ChangePack
	}
	return nil
}

type DetachDocumentRequest struct {
	ClientId             []byte      `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ChangePack           *ChangePack `protobuf:"bytes,2,opt,name=change_pack,json=changePack,proto3" json:"change_pack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DetachDocumentRequest) Reset()         { *m = DetachDocumentRequest{} }
func (m *DetachDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*DetachDocumentRequest) ProtoMessage()    {}
func (*DetachDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{8}
}
func (m *DetachDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetachDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetachDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetachDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachDocumentRequest.Merge(m, src)
}
func (m *DetachDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *DetachDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DetachDocumentRequest proto.InternalMessageInfo

func (m *DetachDocumentRequest) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *DetachDocumentRequest) GetChangePack() *ChangePack {
	if m != nil {
		return m.ChangePack
	}
	return nil
}

type DetachDocumentResponse struct {
	ClientKey            string      `protobuf:"bytes,1,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ChangePack           *ChangePack `protobuf:"bytes,2,opt,name=change_pack,json=changePack,proto3" json:"change_pack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DetachDocumentResponse) Reset()         { *m = DetachDocumentResponse{} }
func (m *DetachDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*DetachDocumentResponse) ProtoMessage()    {}
func (*DetachDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{9}
}
func (m *DetachDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetachDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetachDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DetachDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachDocumentResponse.Merge(m, src)
}
func (m *DetachDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *DetachDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DetachDocumentResponse proto.InternalMessageInfo

func (m *DetachDocumentResponse) GetClientKey() string {
	if m != nil {
		return m.ClientKey
	}
	return ""
}

func (m *DetachDocumentResponse) GetChangePack() *ChangePack {
	if m != nil {
		return m.ChangePack
	}
	return nil
}

type WatchDocumentsRequest struct {
	Client               *Client        `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	DocumentKeys         []*DocumentKey `protobuf:"bytes,2,rep,name=document_keys,json=documentKeys,proto3" json:"document_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WatchDocumentsRequest) Reset()         { *m = WatchDocumentsRequest{} }
func (m *WatchDocumentsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchDocumentsRequest) ProtoMessage()    {}
func (*WatchDocumentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{10}
}
func (m *WatchDocumentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchDocumentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchDocumentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchDocumentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchDocumentsRequest.Merge(m, src)
}
func (m *WatchDocumentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchDocumentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchDocumentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchDocumentsRequest proto.InternalMessageInfo

func (m *WatchDocumentsRequest) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *WatchDocumentsRequest) GetDocumentKeys() []*DocumentKey {
	if m != nil {
		return m.DocumentKeys
	}
	return nil
}

type WatchDocumentsResponse struct {
	// Types that are valid to be assigned to Body:
	//	*WatchDocumentsResponse_Initialization_
	//	*WatchDocumentsResponse_Event
	Body                 isWatchDocumentsResponse_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *WatchDocumentsResponse) Reset()         { *m = WatchDocumentsResponse{} }
func (m *WatchDocumentsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchDocumentsResponse) ProtoMessage()    {}
func (*WatchDocumentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{11}
}
func (m *WatchDocumentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchDocumentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchDocumentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchDocumentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchDocumentsResponse.Merge(m, src)
}
func (m *WatchDocumentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchDocumentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchDocumentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchDocumentsResponse proto.InternalMessageInfo

type isWatchDocumentsResponse_Body interface {
	isWatchDocumentsResponse_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WatchDocumentsResponse_Initialization_ struct {
	Initialization *WatchDocumentsResponse_Initialization `protobuf:"bytes,1,opt,name=initialization,proto3,oneof" json:"initialization,omitempty"`
}
type WatchDocumentsResponse_Event struct {
	Event *DocEvent `protobuf:"bytes,2,opt,name=event,proto3,oneof" json:"event,omitempty"`
}

func (*WatchDocumentsResponse_Initialization_) isWatchDocumentsResponse_Body() {}
func (*WatchDocumentsResponse_Event) isWatchDocumentsResponse_Body()           {}

func (m *WatchDocumentsResponse) GetBody() isWatchDocumentsResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *WatchDocumentsResponse) GetInitialization() *WatchDocumentsResponse_Initialization {
	if x, ok := m.GetBody().(*WatchDocumentsResponse_Initialization_); ok {
		return x.Initialization
	}
	return nil
}

func (m *WatchDocumentsResponse) GetEvent() *DocEvent {
	if x, ok := m.GetBody().(*WatchDocumentsResponse_Event); ok {
		return x.Event
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WatchDocumentsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WatchDocumentsResponse_Initialization_)(nil),
		(*WatchDocumentsResponse_Event)(nil),
	}
}

type WatchDocumentsResponse_Initialization struct {
	PeersMapByDoc        map[string]*Clients `protobuf:"bytes,1,rep,name=peers_map_by_doc,json=peersMapByDoc,proto3" json:"peers_map_by_doc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WatchDocumentsResponse_Initialization) Reset()         { *m = WatchDocumentsResponse_Initialization{} }
func (m *WatchDocumentsResponse_Initialization) String() string { return proto.CompactTextString(m) }
func (*WatchDocumentsResponse_Initialization) ProtoMessage()    {}
func (*WatchDocumentsResponse_Initialization) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{11, 0}
}
func (m *WatchDocumentsResponse_Initialization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchDocumentsResponse_Initialization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchDocumentsResponse_Initialization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchDocumentsResponse_Initialization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchDocumentsResponse_Initialization.Merge(m, src)
}
func (m *WatchDocumentsResponse_Initialization) XXX_Size() int {
	return m.Size()
}
func (m *WatchDocumentsResponse_Initialization) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchDocumentsResponse_Initialization.DiscardUnknown(m)
}

var xxx_messageInfo_WatchDocumentsResponse_Initialization proto.InternalMessageInfo

func (m *WatchDocumentsResponse_Initialization) GetPeersMapByDoc() map[string]*Clients {
	if m != nil {
		return m.PeersMapByDoc
	}
	return nil
}

type PushPullRequest struct {
	ClientId             []byte      `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ChangePack           *ChangePack `protobuf:"bytes,2,opt,name=change_pack,json=changePack,proto3" json:"change_pack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PushPullRequest) Reset()         { *m = PushPullRequest{} }
func (m *PushPullRequest) String() string { return proto.CompactTextString(m) }
func (*PushPullRequest) ProtoMessage()    {}
func (*PushPullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{12}
}
func (m *PushPullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPullRequest.Merge(m, src)
}
func (m *PushPullRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushPullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushPullRequest proto.InternalMessageInfo

func (m *PushPullRequest) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *PushPullRequest) GetChangePack() *ChangePack {
	if m != nil {
		return m.ChangePack
	}
	return nil
}

type PushPullResponse struct {
	ClientId             []byte      `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ChangePack           *ChangePack `protobuf:"bytes,2,opt,name=change_pack,json=changePack,proto3" json:"change_pack,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PushPullResponse) Reset()         { *m = PushPullResponse{} }
func (m *PushPullResponse) String() string { return proto.CompactTextString(m) }
func (*PushPullResponse) ProtoMessage()    {}
func (*PushPullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{13}
}
func (m *PushPullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPullResponse.Merge(m, src)
}
func (m *PushPullResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushPullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushPullResponse proto.InternalMessageInfo

func (m *PushPullResponse) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *PushPullResponse) GetChangePack() *ChangePack {
	if m != nil {
		return m.ChangePack
	}
	return nil
}

type UpdateMetadataRequest struct {
	Client               *Client        `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	DocumentKeys         []*DocumentKey `protobuf:"bytes,2,rep,name=document_keys,json=documentKeys,proto3" json:"document_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateMetadataRequest) Reset()         { *m = UpdateMetadataRequest{} }
func (m *UpdateMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMetadataRequest) ProtoMessage()    {}
func (*UpdateMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{14}
}
func (m *UpdateMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMetadataRequest.Merge(m, src)
}
func (m *UpdateMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMetadataRequest proto.InternalMessageInfo

func (m *UpdateMetadataRequest) GetClient() *Client {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *UpdateMetadataRequest) GetDocumentKeys() []*DocumentKey {
	if m != nil {
		return m.DocumentKeys
	}
	return nil
}

type UpdateMetadataResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMetadataResponse) Reset()         { *m = UpdateMetadataResponse{} }
func (m *UpdateMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMetadataResponse) ProtoMessage()    {}
func (*UpdateMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{15}
}
func (m *UpdateMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMetadataResponse.Merge(m, src)
}
func (m *UpdateMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMetadataResponse proto.InternalMessageInfo

type FetchHistoryRequest struct {
	ClientId             []byte       `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	DocumentKey          *DocumentKey `protobuf:"bytes,2,opt,name=document_key,json=documentKey,proto3" json:"document_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FetchHistoryRequest) Reset()         { *m = FetchHistoryRequest{} }
func (m *FetchHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchHistoryRequest) ProtoMessage()    {}
func (*FetchHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{16}
}
func (m *FetchHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchHistoryRequest.Merge(m, src)
}
func (m *FetchHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchHistoryRequest proto.InternalMessageInfo

func (m *FetchHistoryRequest) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *FetchHistoryRequest) GetDocumentKey() *DocumentKey {
	if m != nil {
		return m.DocumentKey
	}
	return nil
}

type FetchHistoryResponse struct {
	Changes              []*Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FetchHistoryResponse) Reset()         { *m = FetchHistoryResponse{} }
func (m *FetchHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*FetchHistoryResponse) ProtoMessage()    {}
func (*FetchHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{17}
}
func (m *FetchHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchHistoryResponse.Merge(m, src)
}
func (m *FetchHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchHistoryResponse proto.InternalMessageInfo

func (m *FetchHistoryResponse) GetChanges() []*Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

type ChangePack struct {
	DocumentKey          *DocumentKey `protobuf:"bytes,1,opt,name=document_key,json=documentKey,proto3" json:"document_key,omitempty"`
	Checkpoint           *Checkpoint  `protobuf:"bytes,2,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Snapshot             []byte       `protobuf:"bytes,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Changes              []*Change    `protobuf:"bytes,4,rep,name=changes,proto3" json:"changes,omitempty"`
	MinSyncedTicket      *TimeTicket  `protobuf:"bytes,5,opt,name=min_synced_ticket,json=minSyncedTicket,proto3" json:"min_synced_ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChangePack) Reset()         { *m = ChangePack{} }
func (m *ChangePack) String() string { return proto.CompactTextString(m) }
func (*ChangePack) ProtoMessage()    {}
func (*ChangePack) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{18}
}
func (m *ChangePack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangePack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePack.Merge(m, src)
}
func (m *ChangePack) XXX_Size() int {
	return m.Size()
}
func (m *ChangePack) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePack.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePack proto.InternalMessageInfo

func (m *ChangePack) GetDocumentKey() *DocumentKey {
	if m != nil {
		return m.DocumentKey
	}
	return nil
}

func (m *ChangePack) GetCheckpoint() *Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *ChangePack) GetSnapshot() []byte {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *ChangePack) GetChanges() []*Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *ChangePack) GetMinSyncedTicket() *TimeTicket {
	if m != nil {
		return m.MinSyncedTicket
	}
	return nil
}

type Change struct {
	Id                   *ChangeID    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Operations           []*Operation `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{19}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

func (m *Change) GetId() *ChangeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Change) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Change) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

type ChangeID struct {
	ClientSeq            uint32   `protobuf:"varint,1,opt,name=client_seq,json=clientSeq,proto3" json:"client_seq,omitempty"`
	Lamport              uint64   `protobuf:"varint,2,opt,name=lamport,proto3" json:"lamport,omitempty"`
	ActorId              []byte   `protobuf:"bytes,3,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeID) Reset()         { *m = ChangeID{} }
func (m *ChangeID) String() string { return proto.CompactTextString(m) }
func (*ChangeID) ProtoMessage()    {}
func (*ChangeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{20}
}
func (m *ChangeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeID.Merge(m, src)
}
func (m *ChangeID) XXX_Size() int {
	return m.Size()
}
func (m *ChangeID) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeID.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeID proto.InternalMessageInfo

func (m *ChangeID) GetClientSeq() uint32 {
	if m != nil {
		return m.ClientSeq
	}
	return 0
}

func (m *ChangeID) GetLamport() uint64 {
	if m != nil {
		return m.Lamport
	}
	return 0
}

func (m *ChangeID) GetActorId() []byte {
	if m != nil {
		return m.ActorId
	}
	return nil
}

type Operation struct {
	// Types that are valid to be assigned to Body:
	//	*Operation_Set_
	//	*Operation_Add_
	//	*Operation_Move_
	//	*Operation_Remove_
	//	*Operation_Edit_
	//	*Operation_Select_
	//	*Operation_RichEdit_
	//	*Operation_Style_
	//	*Operation_Increase_
	Body                 isOperation_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

type isOperation_Body interface {
	isOperation_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Operation_Set_ struct {
	Set *Operation_Set `protobuf:"bytes,1,opt,name=set,proto3,oneof" json:"set,omitempty"`
}
type Operation_Add_ struct {
	Add *Operation_Add `protobuf:"bytes,2,opt,name=add,proto3,oneof" json:"add,omitempty"`
}
type Operation_Move_ struct {
	Move *Operation_Move `protobuf:"bytes,3,opt,name=move,proto3,oneof" json:"move,omitempty"`
}
type Operation_Remove_ struct {
	Remove *Operation_Remove `protobuf:"bytes,4,opt,name=remove,proto3,oneof" json:"remove,omitempty"`
}
type Operation_Edit_ struct {
	Edit *Operation_Edit `protobuf:"bytes,5,opt,name=edit,proto3,oneof" json:"edit,omitempty"`
}
type Operation_Select_ struct {
	Select *Operation_Select `protobuf:"bytes,6,opt,name=select,proto3,oneof" json:"select,omitempty"`
}
type Operation_RichEdit_ struct {
	RichEdit *Operation_RichEdit `protobuf:"bytes,7,opt,name=rich_edit,json=richEdit,proto3,oneof" json:"rich_edit,omitempty"`
}
type Operation_Style_ struct {
	Style *Operation_Style `protobuf:"bytes,8,opt,name=style,proto3,oneof" json:"style,omitempty"`
}
type Operation_Increase_ struct {
	Increase *Operation_Increase `protobuf:"bytes,9,opt,name=increase,proto3,oneof" json:"increase,omitempty"`
}

func (*Operation_Set_) isOperation_Body()      {}
func (*Operation_Add_) isOperation_Body()      {}
func (*Operation_Move_) isOperation_Body()     {}
func (*Operation_Remove_) isOperation_Body()   {}
func (*Operation_Edit_) isOperation_Body()     {}
func (*Operation_Select_) isOperation_Body()   {}
func (*Operation_RichEdit_) isOperation_Body() {}
func (*Operation_Style_) isOperation_Body()    {}
func (*Operation_Increase_) isOperation_Body() {}

func (m *Operation) GetBody() isOperation_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Operation) GetSet() *Operation_Set {
	if x, ok := m.GetBody().(*Operation_Set_); ok {
		return x.Set
	}
	return nil
}

func (m *Operation) GetAdd() *Operation_Add {
	if x, ok := m.GetBody().(*Operation_Add_); ok {
		return x.Add
	}
	return nil
}

func (m *Operation) GetMove() *Operation_Move {
	if x, ok := m.GetBody().(*Operation_Move_); ok {
		return x.Move
	}
	return nil
}

func (m *Operation) GetRemove() *Operation_Remove {
	if x, ok := m.GetBody().(*Operation_Remove_); ok {
		return x.Remove
	}
	return nil
}

func (m *Operation) GetEdit() *Operation_Edit {
	if x, ok := m.GetBody().(*Operation_Edit_); ok {
		return x.Edit
	}
	return nil
}

func (m *Operation) GetSelect() *Operation_Select {
	if x, ok := m.GetBody().(*Operation_Select_); ok {
		return x.Select
	}
	return nil
}

func (m *Operation) GetRichEdit() *Operation_RichEdit {
	if x, ok := m.GetBody().(*Operation_RichEdit_); ok {
		return x.RichEdit
	}
	return nil
}

func (m *Operation) GetStyle() *Operation_Style {
	if x, ok := m.GetBody().(*Operation_Style_); ok {
		return x.Style
	}
	return nil
}

func (m *Operation) GetIncrease() *Operation_Increase {
	if x, ok := m.GetBody().(*Operation_Increase_); ok {
		return x.Increase
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Operation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Operation_Set_)(nil),
		(*Operation_Add_)(nil),
		(*Operation_Move_)(nil),
		(*Operation_Remove_)(nil),
		(*Operation_Edit_)(nil),
		(*Operation_Select_)(nil),
		(*Operation_RichEdit_)(nil),
		(*Operation_Style_)(nil),
		(*Operation_Increase_)(nil),
	}
}

type Operation_Set struct {
	ParentCreatedAt      *TimeTicket        `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	Key                  string             `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                *JSONElementSimple `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ExecutedAt           *TimeTicket        `protobuf:"bytes,4,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Operation_Set) Reset()         { *m = Operation_Set{} }
func (m *Operation_Set) String() string { return proto.CompactTextString(m) }
func (*Operation_Set) ProtoMessage()    {}
func (*Operation_Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 0}
}
func (m *Operation_Set) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_Set.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_Set.Merge(m, src)
}
func (m *Operation_Set) XXX_Size() int {
	return m.Size()
}
func (m *Operation_Set) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_Set.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_Set proto.InternalMessageInfo

func (m *Operation_Set) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_Set) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Operation_Set) GetValue() *JSONElementSimple {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Operation_Set) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type Operation_Add struct {
	ParentCreatedAt      *TimeTicket        `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	PrevCreatedAt        *TimeTicket        `protobuf:"bytes,2,opt,name=prev_created_at,json=prevCreatedAt,proto3" json:"prev_created_at,omitempty"`
	Value                *JSONElementSimple `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	ExecutedAt           *TimeTicket        `protobuf:"bytes,4,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Operation_Add) Reset()         { *m = Operation_Add{} }
func (m *Operation_Add) String() string { return proto.CompactTextString(m) }
func (*Operation_Add) ProtoMessage()    {}
func (*Operation_Add) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 1}
}
func (m *Operation_Add) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_Add) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_Add.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_Add) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_Add.Merge(m, src)
}
func (m *Operation_Add) XXX_Size() int {
	return m.Size()
}
func (m *Operation_Add) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_Add.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_Add proto.InternalMessageInfo

func (m *Operation_Add) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_Add) GetPrevCreatedAt() *TimeTicket {
	if m != nil {
		return m.PrevCreatedAt
	}
	return nil
}

func (m *Operation_Add) GetValue() *JSONElementSimple {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Operation_Add) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type Operation_Move struct {
	ParentCreatedAt      *TimeTicket `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	PrevCreatedAt        *TimeTicket `protobuf:"bytes,2,opt,name=prev_created_at,json=prevCreatedAt,proto3" json:"prev_created_at,omitempty"`
	CreatedAt            *TimeTicket `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExecutedAt           *TimeTicket `protobuf:"bytes,4,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Operation_Move) Reset()         { *m = Operation_Move{} }
func (m *Operation_Move) String() string { return proto.CompactTextString(m) }
func (*Operation_Move) ProtoMessage()    {}
func (*Operation_Move) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 2}
}
func (m *Operation_Move) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_Move) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_Move.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_Move) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_Move.Merge(m, src)
}
func (m *Operation_Move) XXX_Size() int {
	return m.Size()
}
func (m *Operation_Move) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_Move.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_Move proto.InternalMessageInfo

func (m *Operation_Move) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_Move) GetPrevCreatedAt() *TimeTicket {
	if m != nil {
		return m.PrevCreatedAt
	}
	return nil
}

func (m *Operation_Move) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Operation_Move) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type Operation_Remove struct {
	ParentCreatedAt      *TimeTicket `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	CreatedAt            *TimeTicket `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExecutedAt           *TimeTicket `protobuf:"bytes,3,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Operation_Remove) Reset()         { *m = Operation_Remove{} }
func (m *Operation_Remove) String() string { return proto.CompactTextString(m) }
func (*Operation_Remove) ProtoMessage()    {}
func (*Operation_Remove) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 3}
}
func (m *Operation_Remove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_Remove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_Remove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_Remove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_Remove.Merge(m, src)
}
func (m *Operation_Remove) XXX_Size() int {
	return m.Size()
}
func (m *Operation_Remove) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_Remove.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_Remove proto.InternalMessageInfo

func (m *Operation_Remove) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_Remove) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Operation_Remove) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type Operation_Edit struct {
	ParentCreatedAt      *TimeTicket            `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	From                 *TextNodePos           `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *TextNodePos           `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	CreatedAtMapByActor  map[string]*TimeTicket `protobuf:"bytes,4,rep,name=created_at_map_by_actor,json=createdAtMapByActor,proto3" json:"created_at_map_by_actor,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Content              string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	ExecutedAt           *TimeTicket            `protobuf:"bytes,6,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Operation_Edit) Reset()         { *m = Operation_Edit{} }
func (m *Operation_Edit) String() string { return proto.CompactTextString(m) }
func (*Operation_Edit) ProtoMessage()    {}
func (*Operation_Edit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 4}
}
func (m *Operation_Edit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_Edit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_Edit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_Edit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_Edit.Merge(m, src)
}
func (m *Operation_Edit) XXX_Size() int {
	return m.Size()
}
func (m *Operation_Edit) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_Edit.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_Edit proto.InternalMessageInfo

func (m *Operation_Edit) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_Edit) GetFrom() *TextNodePos {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Operation_Edit) GetTo() *TextNodePos {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Operation_Edit) GetCreatedAtMapByActor() map[string]*TimeTicket {
	if m != nil {
		return m.CreatedAtMapByActor
	}
	return nil
}

func (m *Operation_Edit) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Operation_Edit) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type Operation_Select struct {
	ParentCreatedAt      *TimeTicket  `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	From                 *TextNodePos `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *TextNodePos `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	ExecutedAt           *TimeTicket  `protobuf:"bytes,4,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Operation_Select) Reset()         { *m = Operation_Select{} }
func (m *Operation_Select) String() string { return proto.CompactTextString(m) }
func (*Operation_Select) ProtoMessage()    {}
func (*Operation_Select) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 5}
}
func (m *Operation_Select) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_Select) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_Select.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_Select) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_Select.Merge(m, src)
}
func (m *Operation_Select) XXX_Size() int {
	return m.Size()
}
func (m *Operation_Select) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_Select.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_Select proto.InternalMessageInfo

func (m *Operation_Select) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_Select) GetFrom() *TextNodePos {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Operation_Select) GetTo() *TextNodePos {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Operation_Select) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type Operation_RichEdit struct {
	ParentCreatedAt      *TimeTicket            `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	From                 *TextNodePos           `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *TextNodePos           `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	CreatedAtMapByActor  map[string]*TimeTicket `protobuf:"bytes,4,rep,name=created_at_map_by_actor,json=createdAtMapByActor,proto3" json:"created_at_map_by_actor,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Content              string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Attributes           map[string]string      `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExecutedAt           *TimeTicket            `protobuf:"bytes,7,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Operation_RichEdit) Reset()         { *m = Operation_RichEdit{} }
func (m *Operation_RichEdit) String() string { return proto.CompactTextString(m) }
func (*Operation_RichEdit) ProtoMessage()    {}
func (*Operation_RichEdit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 6}
}
func (m *Operation_RichEdit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_RichEdit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_RichEdit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_RichEdit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_RichEdit.Merge(m, src)
}
func (m *Operation_RichEdit) XXX_Size() int {
	return m.Size()
}
func (m *Operation_RichEdit) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_RichEdit.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_RichEdit proto.InternalMessageInfo

func (m *Operation_RichEdit) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_RichEdit) GetFrom() *TextNodePos {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Operation_RichEdit) GetTo() *TextNodePos {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Operation_RichEdit) GetCreatedAtMapByActor() map[string]*TimeTicket {
	if m != nil {
		return m.CreatedAtMapByActor
	}
	return nil
}

func (m *Operation_RichEdit) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Operation_RichEdit) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Operation_RichEdit) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type Operation_Style struct {
	ParentCreatedAt      *TimeTicket       `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	From                 *TextNodePos      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   *TextNodePos      `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Attributes           map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExecutedAt           *TimeTicket       `protobuf:"bytes,5,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Operation_Style) Reset()         { *m = Operation_Style{} }
func (m *Operation_Style) String() string { return proto.CompactTextString(m) }
func (*Operation_Style) ProtoMessage()    {}
func (*Operation_Style) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 7}
}
func (m *Operation_Style) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_Style) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_Style.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_Style) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_Style.Merge(m, src)
}
func (m *Operation_Style) XXX_Size() int {
	return m.Size()
}
func (m *Operation_Style) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_Style.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_Style proto.InternalMessageInfo

func (m *Operation_Style) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_Style) GetFrom() *TextNodePos {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Operation_Style) GetTo() *TextNodePos {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Operation_Style) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Operation_Style) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type Operation_Increase struct {
	ParentCreatedAt      *TimeTicket        `protobuf:"bytes,1,opt,name=parent_created_at,json=parentCreatedAt,proto3" json:"parent_created_at,omitempty"`
	Value                *JSONElementSimple `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ExecutedAt           *TimeTicket        `protobuf:"bytes,3,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Operation_Increase) Reset()         { *m = Operation_Increase{} }
func (m *Operation_Increase) String() string { return proto.CompactTextString(m) }
func (*Operation_Increase) ProtoMessage()    {}
func (*Operation_Increase) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{21, 8}
}
func (m *Operation_Increase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation_Increase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation_Increase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation_Increase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation_Increase.Merge(m, src)
}
func (m *Operation_Increase) XXX_Size() int {
	return m.Size()
}
func (m *Operation_Increase) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation_Increase.DiscardUnknown(m)
}

var xxx_messageInfo_Operation_Increase proto.InternalMessageInfo

func (m *Operation_Increase) GetParentCreatedAt() *TimeTicket {
	if m != nil {
		return m.ParentCreatedAt
	}
	return nil
}

func (m *Operation_Increase) GetValue() *JSONElementSimple {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Operation_Increase) GetExecutedAt() *TimeTicket {
	if m != nil {
		return m.ExecutedAt
	}
	return nil
}

type JSONElementSimple struct {
	CreatedAt            *TimeTicket `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MovedAt              *TimeTicket `protobuf:"bytes,2,opt,name=moved_at,json=movedAt,proto3" json:"moved_at,omitempty"`
	RemovedAt            *TimeTicket `protobuf:"bytes,3,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	Type                 ValueType   `protobuf:"varint,4,opt,name=type,proto3,enum=api.ValueType" json:"type,omitempty"`
	Value                []byte      `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JSONElementSimple) Reset()         { *m = JSONElementSimple{} }
func (m *JSONElementSimple) String() string { return proto.CompactTextString(m) }
func (*JSONElementSimple) ProtoMessage()    {}
func (*JSONElementSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{22}
}
func (m *JSONElementSimple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSONElementSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSONElementSimple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSONElementSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONElementSimple.Merge(m, src)
}
func (m *JSONElementSimple) XXX_Size() int {
	return m.Size()
}
func (m *JSONElementSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONElementSimple.DiscardUnknown(m)
}

var xxx_messageInfo_JSONElementSimple proto.InternalMessageInfo

func (m *JSONElementSimple) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JSONElementSimple) GetMovedAt() *TimeTicket {
	if m != nil {
		return m.MovedAt
	}
	return nil
}

func (m *JSONElementSimple) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

func (m *JSONElementSimple) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_NULL
}

func (m *JSONElementSimple) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type JSONElement struct {
	// Types that are valid to be assigned to Body:
	//	*JSONElement_JsonObject
	//	*JSONElement_JsonArray
	//	*JSONElement_Primitive_
	//	*JSONElement_Text_
	//	*JSONElement_RichText_
	//	*JSONElement_Counter_
	Body                 isJSONElement_Body `protobuf_oneof:"Body"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *JSONElement) Reset()         { *m = JSONElement{} }
func (m *JSONElement) String() string { return proto.CompactTextString(m) }
func (*JSONElement) ProtoMessage()    {}
func (*JSONElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{23}
}
func (m *JSONElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSONElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSONElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSONElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONElement.Merge(m, src)
}
func (m *JSONElement) XXX_Size() int {
	return m.Size()
}
func (m *JSONElement) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONElement.DiscardUnknown(m)
}

var xxx_messageInfo_JSONElement proto.InternalMessageInfo

type isJSONElement_Body interface {
	isJSONElement_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type JSONElement_JsonObject struct {
	JsonObject *JSONElement_JSONObject `protobuf:"bytes,1,opt,name=json_object,json=jsonObject,proto3,oneof" json:"json_object,omitempty"`
}
type JSONElement_JsonArray struct {
	JsonArray *JSONElement_JSONArray `protobuf:"bytes,2,opt,name=json_array,json=jsonArray,proto3,oneof" json:"json_array,omitempty"`
}
type JSONElement_Primitive_ struct {
	Primitive *JSONElement_Primitive `protobuf:"bytes,3,opt,name=primitive,proto3,oneof" json:"primitive,omitempty"`
}
type JSONElement_Text_ struct {
	Text *JSONElement_Text `protobuf:"bytes,4,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type JSONElement_RichText_ struct {
	RichText *JSONElement_RichText `protobuf:"bytes,5,opt,name=rich_text,json=richText,proto3,oneof" json:"rich_text,omitempty"`
}
type JSONElement_Counter_ struct {
	Counter *JSONElement_Counter `protobuf:"bytes,6,opt,name=counter,proto3,oneof" json:"counter,omitempty"`
}

func (*JSONElement_JsonObject) isJSONElement_Body() {}
func (*JSONElement_JsonArray) isJSONElement_Body()  {}
func (*JSONElement_Primitive_) isJSONElement_Body() {}
func (*JSONElement_Text_) isJSONElement_Body()      {}
func (*JSONElement_RichText_) isJSONElement_Body()  {}
func (*JSONElement_Counter_) isJSONElement_Body()   {}

func (m *JSONElement) GetBody() isJSONElement_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *JSONElement) GetJsonObject() *JSONElement_JSONObject {
	if x, ok := m.GetBody().(*JSONElement_JsonObject); ok {
		return x.JsonObject
	}
	return nil
}

func (m *JSONElement) GetJsonArray() *JSONElement_JSONArray {
	if x, ok := m.GetBody().(*JSONElement_JsonArray); ok {
		return x.JsonArray
	}
	return nil
}

func (m *JSONElement) GetPrimitive() *JSONElement_Primitive {
	if x, ok := m.GetBody().(*JSONElement_Primitive_); ok {
		return x.Primitive
	}
	return nil
}

func (m *JSONElement) GetText() *JSONElement_Text {
	if x, ok := m.GetBody().(*JSONElement_Text_); ok {
		return x.Text
	}
	return nil
}

func (m *JSONElement) GetRichText() *JSONElement_RichText {
	if x, ok := m.GetBody().(*JSONElement_RichText_); ok {
		return x.RichText
	}
	return nil
}

func (m *JSONElement) GetCounter() *JSONElement_Counter {
	if x, ok := m.GetBody().(*JSONElement_Counter_); ok {
		return x.Counter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JSONElement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JSONElement_JsonObject)(nil),
		(*JSONElement_JsonArray)(nil),
		(*JSONElement_Primitive_)(nil),
		(*JSONElement_Text_)(nil),
		(*JSONElement_RichText_)(nil),
		(*JSONElement_Counter_)(nil),
	}
}

type JSONElement_JSONObject struct {
	Nodes                []*RHTNode  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	CreatedAt            *TimeTicket `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MovedAt              *TimeTicket `protobuf:"bytes,3,opt,name=moved_at,json=movedAt,proto3" json:"moved_at,omitempty"`
	RemovedAt            *TimeTicket `protobuf:"bytes,4,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JSONElement_JSONObject) Reset()         { *m = JSONElement_JSONObject{} }
func (m *JSONElement_JSONObject) String() string { return proto.CompactTextString(m) }
func (*JSONElement_JSONObject) ProtoMessage()    {}
func (*JSONElement_JSONObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{23, 0}
}
func (m *JSONElement_JSONObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSONElement_JSONObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSONElement_JSONObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSONElement_JSONObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONElement_JSONObject.Merge(m, src)
}
func (m *JSONElement_JSONObject) XXX_Size() int {
	return m.Size()
}
func (m *JSONElement_JSONObject) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONElement_JSONObject.DiscardUnknown(m)
}

var xxx_messageInfo_JSONElement_JSONObject proto.InternalMessageInfo

func (m *JSONElement_JSONObject) GetNodes() []*RHTNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *JSONElement_JSONObject) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JSONElement_JSONObject) GetMovedAt() *TimeTicket {
	if m != nil {
		return m.MovedAt
	}
	return nil
}

func (m *JSONElement_JSONObject) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

type JSONElement_JSONArray struct {
	Nodes                []*RGANode  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	CreatedAt            *TimeTicket `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MovedAt              *TimeTicket `protobuf:"bytes,3,opt,name=moved_at,json=movedAt,proto3" json:"moved_at,omitempty"`
	RemovedAt            *TimeTicket `protobuf:"bytes,4,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JSONElement_JSONArray) Reset()         { *m = JSONElement_JSONArray{} }
func (m *JSONElement_JSONArray) String() string { return proto.CompactTextString(m) }
func (*JSONElement_JSONArray) ProtoMessage()    {}
func (*JSONElement_JSONArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{23, 1}
}
func (m *JSONElement_JSONArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSONElement_JSONArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSONElement_JSONArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSONElement_JSONArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONElement_JSONArray.Merge(m, src)
}
func (m *JSONElement_JSONArray) XXX_Size() int {
	return m.Size()
}
func (m *JSONElement_JSONArray) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONElement_JSONArray.DiscardUnknown(m)
}

var xxx_messageInfo_JSONElement_JSONArray proto.InternalMessageInfo

func (m *JSONElement_JSONArray) GetNodes() []*RGANode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *JSONElement_JSONArray) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JSONElement_JSONArray) GetMovedAt() *TimeTicket {
	if m != nil {
		return m.MovedAt
	}
	return nil
}

func (m *JSONElement_JSONArray) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

type JSONElement_Primitive struct {
	Type                 ValueType   `protobuf:"varint,1,opt,name=type,proto3,enum=api.ValueType" json:"type,omitempty"`
	Value                []byte      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt            *TimeTicket `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MovedAt              *TimeTicket `protobuf:"bytes,4,opt,name=moved_at,json=movedAt,proto3" json:"moved_at,omitempty"`
	RemovedAt            *TimeTicket `protobuf:"bytes,5,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JSONElement_Primitive) Reset()         { *m = JSONElement_Primitive{} }
func (m *JSONElement_Primitive) String() string { return proto.CompactTextString(m) }
func (*JSONElement_Primitive) ProtoMessage()    {}
func (*JSONElement_Primitive) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{23, 2}
}
func (m *JSONElement_Primitive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSONElement_Primitive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSONElement_Primitive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSONElement_Primitive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONElement_Primitive.Merge(m, src)
}
func (m *JSONElement_Primitive) XXX_Size() int {
	return m.Size()
}
func (m *JSONElement_Primitive) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONElement_Primitive.DiscardUnknown(m)
}

var xxx_messageInfo_JSONElement_Primitive proto.InternalMessageInfo

func (m *JSONElement_Primitive) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_NULL
}

func (m *JSONElement_Primitive) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *JSONElement_Primitive) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JSONElement_Primitive) GetMovedAt() *TimeTicket {
	if m != nil {
		return m.MovedAt
	}
	return nil
}

func (m *JSONElement_Primitive) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

type JSONElement_Text struct {
	Nodes                []*TextNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	CreatedAt            *TimeTicket `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MovedAt              *TimeTicket `protobuf:"bytes,3,opt,name=moved_at,json=movedAt,proto3" json:"moved_at,omitempty"`
	RemovedAt            *TimeTicket `protobuf:"bytes,4,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JSONElement_Text) Reset()         { *m = JSONElement_Text{} }
func (m *JSONElement_Text) String() string { return proto.CompactTextString(m) }
func (*JSONElement_Text) ProtoMessage()    {}
func (*JSONElement_Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{23, 3}
}
func (m *JSONElement_Text) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSONElement_Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSONElement_Text.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSONElement_Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONElement_Text.Merge(m, src)
}
func (m *JSONElement_Text) XXX_Size() int {
	return m.Size()
}
func (m *JSONElement_Text) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONElement_Text.DiscardUnknown(m)
}

var xxx_messageInfo_JSONElement_Text proto.InternalMessageInfo

func (m *JSONElement_Text) GetNodes() []*TextNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *JSONElement_Text) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JSONElement_Text) GetMovedAt() *TimeTicket {
	if m != nil {
		return m.MovedAt
	}
	return nil
}

func (m *JSONElement_Text) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

type JSONElement_RichText struct {
	Nodes                []*RichTextNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	CreatedAt            *TimeTicket     `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MovedAt              *TimeTicket     `protobuf:"bytes,3,opt,name=moved_at,json=movedAt,proto3" json:"moved_at,omitempty"`
	RemovedAt            *TimeTicket     `protobuf:"bytes,4,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *JSONElement_RichText) Reset()         { *m = JSONElement_RichText{} }
func (m *JSONElement_RichText) String() string { return proto.CompactTextString(m) }
func (*JSONElement_RichText) ProtoMessage()    {}
func (*JSONElement_RichText) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{23, 4}
}
func (m *JSONElement_RichText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSONElement_RichText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSONElement_RichText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSONElement_RichText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONElement_RichText.Merge(m, src)
}
func (m *JSONElement_RichText) XXX_Size() int {
	return m.Size()
}
func (m *JSONElement_RichText) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONElement_RichText.DiscardUnknown(m)
}

var xxx_messageInfo_JSONElement_RichText proto.InternalMessageInfo

func (m *JSONElement_RichText) GetNodes() []*RichTextNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *JSONElement_RichText) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JSONElement_RichText) GetMovedAt() *TimeTicket {
	if m != nil {
		return m.MovedAt
	}
	return nil
}

func (m *JSONElement_RichText) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

type JSONElement_Counter struct {
	Type                 ValueType   `protobuf:"varint,1,opt,name=type,proto3,enum=api.ValueType" json:"type,omitempty"`
	Value                []byte      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt            *TimeTicket `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MovedAt              *TimeTicket `protobuf:"bytes,4,opt,name=moved_at,json=movedAt,proto3" json:"moved_at,omitempty"`
	RemovedAt            *TimeTicket `protobuf:"bytes,5,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JSONElement_Counter) Reset()         { *m = JSONElement_Counter{} }
func (m *JSONElement_Counter) String() string { return proto.CompactTextString(m) }
func (*JSONElement_Counter) ProtoMessage()    {}
func (*JSONElement_Counter) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{23, 5}
}
func (m *JSONElement_Counter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JSONElement_Counter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JSONElement_Counter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JSONElement_Counter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONElement_Counter.Merge(m, src)
}
func (m *JSONElement_Counter) XXX_Size() int {
	return m.Size()
}
func (m *JSONElement_Counter) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONElement_Counter.DiscardUnknown(m)
}

var xxx_messageInfo_JSONElement_Counter proto.InternalMessageInfo

func (m *JSONElement_Counter) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_NULL
}

func (m *JSONElement_Counter) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *JSONElement_Counter) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JSONElement_Counter) GetMovedAt() *TimeTicket {
	if m != nil {
		return m.MovedAt
	}
	return nil
}

func (m *JSONElement_Counter) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

type RHTNode struct {
	Key                  string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Element              *JSONElement `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RHTNode) Reset()         { *m = RHTNode{} }
func (m *RHTNode) String() string { return proto.CompactTextString(m) }
func (*RHTNode) ProtoMessage()    {}
func (*RHTNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{24}
}
func (m *RHTNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RHTNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RHTNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RHTNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RHTNode.Merge(m, src)
}
func (m *RHTNode) XXX_Size() int {
	return m.Size()
}
func (m *RHTNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RHTNode.DiscardUnknown(m)
}

var xxx_messageInfo_RHTNode proto.InternalMessageInfo

func (m *RHTNode) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RHTNode) GetElement() *JSONElement {
	if m != nil {
		return m.Element
	}
	return nil
}

type RGANode struct {
	Next                 *RGANode     `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	Element              *JSONElement `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RGANode) Reset()         { *m = RGANode{} }
func (m *RGANode) String() string { return proto.CompactTextString(m) }
func (*RGANode) ProtoMessage()    {}
func (*RGANode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{25}
}
func (m *RGANode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RGANode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RGANode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RGANode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RGANode.Merge(m, src)
}
func (m *RGANode) XXX_Size() int {
	return m.Size()
}
func (m *RGANode) XXX_DiscardUnknown() {
	xxx_messageInfo_RGANode.DiscardUnknown(m)
}

var xxx_messageInfo_RGANode proto.InternalMessageInfo

func (m *RGANode) GetNext() *RGANode {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *RGANode) GetElement() *JSONElement {
	if m != nil {
		return m.Element
	}
	return nil
}

type TextNode struct {
	Id                   *TextNodeID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                string      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	RemovedAt            *TimeTicket `protobuf:"bytes,3,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	InsPrevId            *TextNodeID `protobuf:"bytes,4,opt,name=ins_prev_id,json=insPrevId,proto3" json:"ins_prev_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TextNode) Reset()         { *m = TextNode{} }
func (m *TextNode) String() string { return proto.CompactTextString(m) }
func (*TextNode) ProtoMessage()    {}
func (*TextNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{26}
}
func (m *TextNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextNode.Merge(m, src)
}
func (m *TextNode) XXX_Size() int {
	return m.Size()
}
func (m *TextNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TextNode.DiscardUnknown(m)
}

var xxx_messageInfo_TextNode proto.InternalMessageInfo

func (m *TextNode) GetId() *TextNodeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TextNode) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TextNode) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

func (m *TextNode) GetInsPrevId() *TextNodeID {
	if m != nil {
		return m.InsPrevId
	}
	return nil
}

type RichTextNodeAttr struct {
	Key                  string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	UpdatedAt            *TimeTicket `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RichTextNodeAttr) Reset()         { *m = RichTextNodeAttr{} }
func (m *RichTextNodeAttr) String() string { return proto.CompactTextString(m) }
func (*RichTextNodeAttr) ProtoMessage()    {}
func (*RichTextNodeAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{27}
}
func (m *RichTextNodeAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RichTextNodeAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RichTextNodeAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RichTextNodeAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RichTextNodeAttr.Merge(m, src)
}
func (m *RichTextNodeAttr) XXX_Size() int {
	return m.Size()
}
func (m *RichTextNodeAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_RichTextNodeAttr.DiscardUnknown(m)
}

var xxx_messageInfo_RichTextNodeAttr proto.InternalMessageInfo

func (m *RichTextNodeAttr) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RichTextNodeAttr) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RichTextNodeAttr) GetUpdatedAt() *TimeTicket {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type RichTextNode struct {
	Id                   *TextNodeID                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           map[string]*RichTextNodeAttr `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Value                string                       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	RemovedAt            *TimeTicket                  `protobuf:"bytes,4,opt,name=removed_at,json=removedAt,proto3" json:"removed_at,omitempty"`
	InsPrevId            *TextNodeID                  `protobuf:"bytes,5,opt,name=ins_prev_id,json=insPrevId,proto3" json:"ins_prev_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *RichTextNode) Reset()         { *m = RichTextNode{} }
func (m *RichTextNode) String() string { return proto.CompactTextString(m) }
func (*RichTextNode) ProtoMessage()    {}
func (*RichTextNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{28}
}
func (m *RichTextNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RichTextNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RichTextNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RichTextNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RichTextNode.Merge(m, src)
}
func (m *RichTextNode) XXX_Size() int {
	return m.Size()
}
func (m *RichTextNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RichTextNode.DiscardUnknown(m)
}

var xxx_messageInfo_RichTextNode proto.InternalMessageInfo

func (m *RichTextNode) GetId() *TextNodeID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RichTextNode) GetAttributes() map[string]*RichTextNodeAttr {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RichTextNode) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RichTextNode) GetRemovedAt() *TimeTicket {
	if m != nil {
		return m.RemovedAt
	}
	return nil
}

func (m *RichTextNode) GetInsPrevId() *TextNodeID {
	if m != nil {
		return m.InsPrevId
	}
	return nil
}

type TextNodeID struct {
	CreatedAt            *TimeTicket `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Offset               int32       `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TextNodeID) Reset()         { *m = TextNodeID{} }
func (m *TextNodeID) String() string { return proto.CompactTextString(m) }
func (*TextNodeID) ProtoMessage()    {}
func (*TextNodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{29}
}
func (m *TextNodeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextNodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextNodeID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextNodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextNodeID.Merge(m, src)
}
func (m *TextNodeID) XXX_Size() int {
	return m.Size()
}
func (m *TextNodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_TextNodeID.DiscardUnknown(m)
}

var xxx_messageInfo_TextNodeID proto.InternalMessageInfo

func (m *TextNodeID) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TextNodeID) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type Metadata struct {
	Clock                int32             `protobuf:"varint,1,opt,name=clock,proto3" json:"clock,omitempty"`
	Data                 map[string]string `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{30}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetClock() int32 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *Metadata) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type Client struct {
	Id                   []byte    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata             *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Client) Reset()         { *m = Client{} }
func (m *Client) String() string { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()    {}
func (*Client) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{31}
}
func (m *Client) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Client) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Client.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Client) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Client.Merge(m, src)
}
func (m *Client) XXX_Size() int {
	return m.Size()
}
func (m *Client) XXX_DiscardUnknown() {
	xxx_messageInfo_Client.DiscardUnknown(m)
}

var xxx_messageInfo_Client proto.InternalMessageInfo

func (m *Client) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Client) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Clients struct {
	Clients              []*Client `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Clients) Reset()         { *m = Clients{} }
func (m *Clients) String() string { return proto.CompactTextString(m) }
func (*Clients) ProtoMessage()    {}
func (*Clients) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{32}
}
func (m *Clients) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clients) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clients.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Clients) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clients.Merge(m, src)
}
func (m *Clients) XXX_Size() int {
	return m.Size()
}
func (m *Clients) XXX_DiscardUnknown() {
	xxx_messageInfo_Clients.DiscardUnknown(m)
}

var xxx_messageInfo_Clients proto.InternalMessageInfo

func (m *Clients) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type DocumentKey struct {
	Collection           string   `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Document             string   `protobuf:"bytes,2,opt,name=document,proto3" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DocumentKey) Reset()         { *m = DocumentKey{} }
func (m *DocumentKey) String() string { return proto.CompactTextString(m) }
func (*DocumentKey) ProtoMessage()    {}
func (*DocumentKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{33}
}
func (m *DocumentKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentKey.Merge(m, src)
}
func (m *DocumentKey) XXX_Size() int {
	return m.Size()
}
func (m *DocumentKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentKey.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentKey proto.InternalMessageInfo

func (m *DocumentKey) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *DocumentKey) GetDocument() string {
	if m != nil {
		return m.Document
	}
	return ""
}

type Checkpoint struct {
	ServerSeq            uint64   `protobuf:"varint,1,opt,name=server_seq,json=serverSeq,proto3" json:"server_seq,omitempty"`
	ClientSeq            uint32   `protobuf:"varint,2,opt,name=client_seq,json=clientSeq,proto3" json:"client_seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Checkpoint) Reset()         { *m = Checkpoint{} }
func (m *Checkpoint) String() string { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()    {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{34}
}
func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(m, src)
}
func (m *Checkpoint) XXX_Size() int {
	return m.Size()
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func (m *Checkpoint) GetServerSeq() uint64 {
	if m != nil {
		return m.ServerSeq
	}
	return 0
}

func (m *Checkpoint) GetClientSeq() uint32 {
	if m != nil {
		return m.ClientSeq
	}
	return 0
}

type TextNodePos struct {
	CreatedAt            *TimeTicket `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Offset               int32       `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	RelativeOffset       int32       `protobuf:"varint,3,opt,name=relative_offset,json=relativeOffset,proto3" json:"relative_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TextNodePos) Reset()         { *m = TextNodePos{} }
func (m *TextNodePos) String() string { return proto.CompactTextString(m) }
func (*TextNodePos) ProtoMessage()    {}
func (*TextNodePos) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{35}
}
func (m *TextNodePos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextNodePos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextNodePos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextNodePos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextNodePos.Merge(m, src)
}
func (m *TextNodePos) XXX_Size() int {
	return m.Size()
}
func (m *TextNodePos) XXX_DiscardUnknown() {
	xxx_messageInfo_TextNodePos.DiscardUnknown(m)
}

var xxx_messageInfo_TextNodePos proto.InternalMessageInfo

func (m *TextNodePos) GetCreatedAt() *TimeTicket {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TextNodePos) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TextNodePos) GetRelativeOffset() int32 {
	if m != nil {
		return m.RelativeOffset
	}
	return 0
}

type TimeTicket struct {
	Lamport              uint64   `protobuf:"varint,1,opt,name=lamport,proto3" json:"lamport,omitempty"`
	Delimiter            uint32   `protobuf:"varint,2,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	ActorId              []byte   `protobuf:"bytes,3,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeTicket) Reset()         { *m = TimeTicket{} }
func (m *TimeTicket) String() string { return proto.CompactTextString(m) }
func (*TimeTicket) ProtoMessage()    {}
func (*TimeTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{36}
}
func (m *TimeTicket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeTicket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeTicket.Merge(m, src)
}
func (m *TimeTicket) XXX_Size() int {
	return m.Size()
}
func (m *TimeTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeTicket.DiscardUnknown(m)
}

var xxx_messageInfo_TimeTicket proto.InternalMessageInfo

func (m *TimeTicket) GetLamport() uint64 {
	if m != nil {
		return m.Lamport
	}
	return 0
}

func (m *TimeTicket) GetDelimiter() uint32 {
	if m != nil {
		return m.Delimiter
	}
	return 0
}

func (m *TimeTicket) GetActorId() []byte {
	if m != nil {
		return m.ActorId
	}
	return nil
}

type DocEvent struct {
	Type                 DocEventType   `protobuf:"varint,1,opt,name=type,proto3,enum=api.DocEventType" json:"type,omitempty"`
	Publisher            *Client        `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	DocumentKeys         []*DocumentKey `protobuf:"bytes,3,rep,name=document_keys,json=documentKeys,proto3" json:"document_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DocEvent) Reset()         { *m = DocEvent{} }
func (m *DocEvent) String() string { return proto.CompactTextString(m) }
func (*DocEvent) ProtoMessage()    {}
func (*DocEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9df40050e88fbc16, []int{37}
}
func (m *DocEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocEvent.Merge(m, src)
}
func (m *DocEvent) XXX_Size() int {
	return m.Size()
}
func (m *DocEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DocEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DocEvent proto.InternalMessageInfo

func (m *DocEvent) GetType() DocEventType {
	if m != nil {
		return m.Type
	}
	return DocEventType_DOCUMENTS_CHANGED
}

func (m *DocEvent) GetPublisher() *Client {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *DocEvent) GetDocumentKeys() []*DocumentKey {
	if m != nil {
		return m.DocumentKeys
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("api.DocEventType", DocEventType_name, DocEventType_value)
	proto.RegisterType((*BroadcastEventRequest)(nil), "api.BroadcastEventRequest")
	proto.RegisterType((*BroadcastEventResponse)(nil), "api.BroadcastEventResponse")
	proto.RegisterType((*ActivateClientRequest)(nil), "api.ActivateClientRequest")
	proto.RegisterType((*ActivateClientResponse)(nil), "api.ActivateClientResponse")
	proto.RegisterType((*DeactivateClientRequest)(nil), "api.DeactivateClientRequest")
	proto.RegisterType((*DeactivateClientResponse)(nil), "api.DeactivateClientResponse")
	proto.RegisterType((*AttachDocumentRequest)(nil), "api.AttachDocumentRequest")
	proto.RegisterType((*AttachDocumentResponse)(nil), "api.AttachDocumentResponse")
	proto.RegisterType((*DetachDocumentRequest)(nil), "api.DetachDocumentRequest")
	proto.RegisterType((*DetachDocumentResponse)(nil), "api.DetachDocumentResponse")
	proto.RegisterType((*WatchDocumentsRequest)(nil), "api.WatchDocumentsRequest")
	proto.RegisterType((*WatchDocumentsResponse)(nil), "api.WatchDocumentsResponse")
	proto.RegisterType((*WatchDocumentsResponse_Initialization)(nil), "api.WatchDocumentsResponse.Initialization")
	proto.RegisterMapType((map[string]*Clients)(nil), "api.WatchDocumentsResponse.Initialization.PeersMapByDocEntry")
	proto.RegisterType((*PushPullRequest)(nil), "api.PushPullRequest")
	proto.RegisterType((*PushPullResponse)(nil), "api.PushPullResponse")
	proto.RegisterType((*UpdateMetadataRequest)(nil), "api.UpdateMetadataRequest")
	proto.RegisterType((*UpdateMetadataResponse)(nil), "api.UpdateMetadataResponse")
	proto.RegisterType((*FetchHistoryRequest)(nil), "api.FetchHistoryRequest")
	proto.RegisterType((*FetchHistoryResponse)(nil), "api.FetchHistoryResponse")
	proto.RegisterType((*ChangePack)(nil), "api.ChangePack")
	proto.RegisterType((*Change)(nil), "api.Change")
	proto.RegisterType((*ChangeID)(nil), "api.ChangeID")
	proto.RegisterType((*Operation)(nil), "api.Operation")
	proto.RegisterType((*Operation_Set)(nil), "api.Operation.Set")
	proto.RegisterType((*Operation_Add)(nil), "api.Operation.Add")
	proto.RegisterType((*Operation_Move)(nil), "api.Operation.Move")
	proto.RegisterType((*Operation_Remove)(nil), "api.Operation.Remove")
	proto.RegisterType((*Operation_Edit)(nil), "api.Operation.Edit")
	proto.RegisterMapType((map[string]*TimeTicket)(nil), "api.Operation.Edit.CreatedAtMapByActorEntry")
	proto.RegisterType((*Operation_Select)(nil), "api.Operation.Select")
	proto.RegisterType((*Operation_RichEdit)(nil), "api.Operation.RichEdit")
	proto.RegisterMapType((map[string]string)(nil), "api.Operation.RichEdit.AttributesEntry")
	proto.RegisterMapType((map[string]*TimeTicket)(nil), "api.Operation.RichEdit.CreatedAtMapByActorEntry")
	proto.RegisterType((*Operation_Style)(nil), "api.Operation.Style")
	proto.RegisterMapType((map[string]string)(nil), "api.Operation.Style.AttributesEntry")
	proto.RegisterType((*Operation_Increase)(nil), "api.Operation.Increase")
	proto.RegisterType((*JSONElementSimple)(nil), "api.JSONElementSimple")
	proto.RegisterType((*JSONElement)(nil), "api.JSONElement")
	proto.RegisterType((*JSONElement_JSONObject)(nil), "api.JSONElement.JSONObject")
	proto.RegisterType((*JSONElement_JSONArray)(nil), "api.JSONElement.JSONArray")
	proto.RegisterType((*JSONElement_Primitive)(nil), "api.JSONElement.Primitive")
	proto.RegisterType((*JSONElement_Text)(nil), "api.JSONElement.Text")
	proto.RegisterType((*JSONElement_RichText)(nil), "api.JSONElement.RichText")
	proto.RegisterType((*JSONElement_Counter)(nil), "api.JSONElement.Counter")
	proto.RegisterType((*RHTNode)(nil), "api.RHTNode")
	proto.RegisterType((*RGANode)(nil), "api.RGANode")
	proto.RegisterType((*TextNode)(nil), "api.TextNode")
	proto.RegisterType((*RichTextNodeAttr)(nil), "api.RichTextNodeAttr")
	proto.RegisterType((*RichTextNode)(nil), "api.RichTextNode")
	proto.RegisterMapType((map[string]*RichTextNodeAttr)(nil), "api.RichTextNode.AttributesEntry")
	proto.RegisterType((*TextNodeID)(nil), "api.TextNodeID")
	proto.RegisterType((*Metadata)(nil), "api.Metadata")
	proto.RegisterMapType((map[string]string)(nil), "api.Metadata.DataEntry")
	proto.RegisterType((*Client)(nil), "api.Client")
	proto.RegisterType((*Clients)(nil), "api.Clients")
	proto.RegisterType((*DocumentKey)(nil), "api.DocumentKey")
	proto.RegisterType((*Checkpoint)(nil), "api.Checkpoint")
	proto.RegisterType((*TextNodePos)(nil), "api.TextNodePos")
	proto.RegisterType((*TimeTicket)(nil), "api.TimeTicket")
	proto.RegisterType((*DocEvent)(nil), "api.DocEvent")
}

func init() { proto.RegisterFile("api/yorkie.proto", fileDescriptor_9df40050e88fbc16) }

var fileDescriptor_9df40050e88fbc16 = []byte{
	// 2474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x1a, 0x4d, 0x6f, 0xdb, 0xc8,
	0x55, 0xd4, 0x37, 0x9f, 0x64, 0x99, 0x99, 0xc4, 0x8e, 0x56, 0x9b, 0xa4, 0x09, 0xb3, 0x69, 0x3e,
	0x36, 0x70, 0x02, 0x6f, 0x37, 0xd9, 0xee, 0x22, 0x05, 0x68, 0x49, 0xb5, 0xb4, 0x89, 0x65, 0x97,
	0x52, 0x36, 0xcd, 0x49, 0xa5, 0xc9, 0x71, 0xcc, 0x58, 0x12, 0x19, 0x92, 0x32, 0xa2, 0x1e, 0x7a,
	0xec, 0xa1, 0xd7, 0xf6, 0xd0, 0x73, 0x51, 0x60, 0xff, 0x40, 0x81, 0x1e, 0x5a, 0x20, 0x87, 0x5e,
	0x72, 0xdb, 0xf6, 0x58, 0x14, 0x28, 0x16, 0xe9, 0xa5, 0xe7, 0xfe, 0x82, 0x62, 0x3e, 0x48, 0x91,
	0x14, 0x6d, 0x59, 0xcd, 0x66, 0xd7, 0xe8, 0x8d, 0x33, 0xef, 0x7b, 0xde, 0x9b, 0x79, 0x8f, 0xf3,
	0x06, 0x24, 0xcd, 0x36, 0xef, 0x4c, 0x2c, 0xe7, 0xc0, 0xc4, 0x6b, 0xb6, 0x63, 0x79, 0x16, 0xca,
	0x68, 0xb6, 0x29, 0xf7, 0x61, 0x65, 0xc3, 0xb1, 0x34, 0x43, 0xd7, 0x5c, 0xaf, 0x79, 0x88, 0x47,
	0x9e, 0x8a, 0x5f, 0x8c, 0xb1, 0xeb, 0xa1, 0x2b, 0x50, 0xb6, 0xc7, 0xbb, 0x03, 0xd3, 0xdd, 0xc7,
	0x4e, 0xdf, 0x34, 0xaa, 0xc2, 0x65, 0xe1, 0x46, 0x59, 0x2d, 0x05, 0x73, 0x6d, 0x03, 0x5d, 0x85,
	0x1c, 0x26, 0x24, 0xd5, 0xf4, 0x65, 0xe1, 0x46, 0x69, 0x7d, 0x69, 0x4d, 0xb3, 0xcd, 0xb5, 0x86,
	0xa5, 0x33, 0x3e, 0x0c, 0x26, 0x57, 0x61, 0x35, 0x2e, 0xc0, 0xb5, 0xad, 0x91, 0x8b, 0xe5, 0x7b,
	0xb0, 0xa2, 0xe8, 0x9e, 0x79, 0xa8, 0x79, 0xb8, 0x3e, 0x30, 0x43, 0xa2, 0x2f, 0x02, 0xe8, 0x74,
	0xa2, 0x7f, 0x80, 0x27, 0x54, 0xb0, 0xa8, 0x8a, 0x6c, 0xe6, 0x21, 0x9e, 0xc8, 0x3d, 0x58, 0x8d,
	0xd3, 0x31, 0x8e, 0x73, 0x08, 0xd1, 0xfb, 0xc0, 0x07, 0xc4, 0x9e, 0x34, 0xb5, 0xa7, 0xc8, 0x26,
	0xda, 0x86, 0x7c, 0x0f, 0xce, 0x37, 0xb0, 0x96, 0xa8, 0x4f, 0x84, 0x4e, 0x88, 0xd1, 0xdd, 0x87,
	0xea, 0x2c, 0x1d, 0xd7, 0xe7, 0x58, 0xc2, 0x3d, 0x58, 0x51, 0x3c, 0x4f, 0xd3, 0xf7, 0x1b, 0x96,
	0x3e, 0x1e, 0x9e, 0x50, 0x1c, 0xba, 0x0b, 0x25, 0x7d, 0x5f, 0x1b, 0x3d, 0xc3, 0x7d, 0x5b, 0xd3,
	0x0f, 0xf8, 0xca, 0x2f, 0xd3, 0x95, 0xaf, 0xd3, 0xf9, 0x1d, 0x4d, 0x3f, 0x50, 0x41, 0x0f, 0xbe,
	0xe5, 0x67, 0xb0, 0x1a, 0x97, 0x73, 0x02, 0xf5, 0xfe, 0x07, 0x41, 0x7b, 0xb0, 0xd2, 0xc0, 0xdf,
	0x82, 0x41, 0x26, 0xac, 0xc6, 0xe5, 0x9c, 0xcc, 0xff, 0x8b, 0x8b, 0x72, 0x61, 0xe5, 0x89, 0xe6,
	0x4d, 0x25, 0xb9, 0xbe, 0x49, 0x57, 0x21, 0xcf, 0xf8, 0x52, 0x29, 0xa5, 0xf5, 0x12, 0xe3, 0xc2,
	0xdc, 0xcf, 0x41, 0xe8, 0x63, 0x58, 0x32, 0x38, 0x21, 0x51, 0xc8, 0xad, 0xa6, 0x2f, 0x67, 0x6e,
	0x94, 0xd6, 0x25, 0x7f, 0x9f, 0x50, 0xc8, 0x43, 0x3c, 0x51, 0xcb, 0xc6, 0x74, 0xe0, 0xca, 0xff,
	0x4e, 0xc3, 0x6a, 0x5c, 0x2a, 0x37, 0xb0, 0x07, 0x15, 0x73, 0x64, 0x7a, 0xa6, 0x36, 0x30, 0x7f,
	0xae, 0x79, 0xa6, 0x35, 0xe2, 0xe2, 0x6f, 0x51, 0x96, 0xc9, 0x44, 0x6b, 0xed, 0x08, 0x45, 0x2b,
	0xa5, 0xc6, 0x78, 0xa0, 0x6b, 0xc7, 0xed, 0xe3, 0x56, 0x8a, 0xef, 0xe4, 0xda, 0x6b, 0x01, 0x2a,
	0x51, 0x5e, 0x68, 0x0f, 0x24, 0x1b, 0x63, 0xc7, 0xed, 0x0f, 0x35, 0xbb, 0xbf, 0x3b, 0xe9, 0x1b,
	0x96, 0x5e, 0x15, 0xa8, 0x91, 0x0f, 0x4e, 0xae, 0xd1, 0xda, 0x0e, 0x61, 0xb1, 0xa5, 0xd9, 0x1b,
	0x13, 0x22, 0x74, 0xe4, 0x39, 0x13, 0x75, 0xc9, 0x0e, 0xcf, 0xd5, 0x3a, 0x80, 0x66, 0x91, 0x90,
	0x04, 0x99, 0xa9, 0x9f, 0xc9, 0x27, 0x92, 0x21, 0x77, 0xa8, 0x0d, 0xc6, 0x98, 0x5b, 0x52, 0x0e,
	0x79, 0xc5, 0x55, 0x19, 0xe8, 0xd3, 0xf4, 0x27, 0xc2, 0x46, 0x1e, 0xb2, 0xbb, 0x96, 0x31, 0x91,
	0x7f, 0x06, 0xcb, 0x3b, 0x63, 0x77, 0x7f, 0x67, 0x3c, 0x18, 0xbc, 0xa3, 0x60, 0xd5, 0x40, 0x9a,
	0x4a, 0x78, 0x37, 0xfb, 0xce, 0x85, 0x95, 0xc7, 0xb6, 0xa1, 0x79, 0x78, 0x0b, 0x7b, 0x9a, 0xa1,
	0x79, 0xda, 0xb7, 0x11, 0xa4, 0x55, 0x58, 0x8d, 0x0b, 0xe5, 0xc7, 0xfa, 0x33, 0x38, 0xfb, 0x63,
	0xec, 0xe9, 0xfb, 0x2d, 0xd3, 0xf5, 0x2c, 0x67, 0x72, 0xa2, 0x75, 0xfd, 0x08, 0xca, 0x61, 0x25,
	0xb8, 0xd5, 0xb3, 0x3a, 0x94, 0x42, 0x3a, 0xc8, 0x0f, 0xe0, 0x5c, 0x54, 0x10, 0x5f, 0xde, 0x6b,
	0x50, 0x60, 0xab, 0xe3, 0xf2, 0x58, 0x2c, 0x85, 0x56, 0x4f, 0xf5, 0x61, 0xf2, 0x7f, 0x04, 0x80,
	0xe9, 0x8a, 0xce, 0xa8, 0x20, 0x9c, 0x40, 0x05, 0x74, 0x07, 0x40, 0xdf, 0xc7, 0xfa, 0x81, 0x6d,
	0x99, 0xc1, 0xf6, 0xf1, 0x7d, 0xe5, 0x4f, 0xab, 0x21, 0x14, 0x54, 0x83, 0xa2, 0x3b, 0xd2, 0x6c,
	0x77, 0xdf, 0xf2, 0xaa, 0x19, 0xb6, 0x08, 0xfe, 0x38, 0xac, 0x77, 0xf6, 0x68, 0xbd, 0xd1, 0x67,
	0x70, 0x66, 0x68, 0x8e, 0xfa, 0xee, 0x64, 0xa4, 0x63, 0xa3, 0xef, 0x99, 0xfa, 0x01, 0xf6, 0xaa,
	0xb9, 0x90, 0xe8, 0x9e, 0x39, 0xc4, 0x3d, 0x3a, 0xad, 0x2e, 0x0f, 0xcd, 0x51, 0x97, 0x22, 0xb2,
	0x09, 0xf9, 0x05, 0xe4, 0x19, 0x3f, 0x74, 0x11, 0xd2, 0xdc, 0x11, 0xfe, 0x8e, 0x67, 0x80, 0x76,
	0x43, 0x4d, 0x9b, 0x06, 0xaa, 0x42, 0x61, 0x88, 0x5d, 0x57, 0x7b, 0xc6, 0xf6, 0x92, 0xa8, 0xfa,
	0x43, 0xb4, 0x06, 0x60, 0xd9, 0xd8, 0xa1, 0x5b, 0xd7, 0xad, 0x66, 0xa8, 0xa6, 0x15, 0xca, 0x60,
	0xdb, 0x9f, 0x56, 0x43, 0x18, 0xf2, 0x2e, 0x14, 0x7d, 0xce, 0xa1, 0x03, 0xda, 0xc5, 0x2f, 0xa8,
	0xf0, 0x25, 0xff, 0x80, 0xee, 0xe2, 0x17, 0xe8, 0x02, 0x14, 0x06, 0xda, 0xd0, 0xb6, 0x1c, 0xb6,
	0x96, 0xd9, 0x8d, 0xf4, 0x5d, 0x41, 0xf5, 0xa7, 0xd0, 0x7b, 0x50, 0xd4, 0x74, 0xcf, 0xa2, 0xd5,
	0x08, 0x5b, 0xbb, 0x02, 0x1d, 0xb7, 0x0d, 0xf9, 0xf5, 0x2a, 0x88, 0x81, 0x74, 0xf4, 0x7d, 0xc8,
	0xb8, 0xd8, 0x0f, 0x7a, 0x14, 0x55, 0x6d, 0xad, 0x8b, 0xc9, 0x91, 0x46, 0x10, 0x08, 0x9e, 0x66,
	0x18, 0xdc, 0x6d, 0x71, 0x3c, 0xc5, 0x30, 0x08, 0x9e, 0x66, 0x18, 0xe8, 0x26, 0x64, 0x87, 0xd6,
	0x21, 0xa6, 0x42, 0x4b, 0xeb, 0x67, 0x63, 0x88, 0x5b, 0xd6, 0x21, 0x6e, 0xa5, 0x54, 0x8a, 0x82,
	0xee, 0x40, 0xde, 0xc1, 0x14, 0x39, 0x4b, 0x91, 0x57, 0x62, 0xc8, 0x2a, 0x05, 0xb6, 0x52, 0x2a,
	0x47, 0x23, 0xbc, 0xb1, 0x61, 0xfa, 0x0e, 0x8c, 0xf3, 0x6e, 0x1a, 0x26, 0xd1, 0x96, 0xa2, 0x10,
	0xde, 0x2e, 0x1e, 0x60, 0xdd, 0xab, 0xe6, 0x13, 0x79, 0x77, 0x29, 0x90, 0xf0, 0x66, 0x68, 0xe8,
	0x1e, 0x88, 0x8e, 0xa9, 0xef, 0xf7, 0xa9, 0x80, 0x02, 0xa5, 0x39, 0x1f, 0xd7, 0xc7, 0xd4, 0xf7,
	0xb9, 0x90, 0xa2, 0xc3, 0xbf, 0xd1, 0x6d, 0xc8, 0xb9, 0xde, 0x64, 0x80, 0xab, 0x45, 0x4a, 0x73,
	0x2e, 0x2e, 0x87, 0xc0, 0x48, 0x5a, 0xa0, 0x48, 0xe8, 0x63, 0x28, 0x9a, 0x23, 0xdd, 0xc1, 0x9a,
	0x8b, 0xab, 0x62, 0xa2, 0x90, 0x36, 0x07, 0x13, 0x21, 0x3e, 0x6a, 0xed, 0x0f, 0x02, 0x64, 0xba,
	0xd8, 0x23, 0xe1, 0x6c, 0x6b, 0x0e, 0x09, 0x09, 0x02, 0xf0, 0xb0, 0xd1, 0xd7, 0x7c, 0xd7, 0xcd,
	0x86, 0x33, 0xc3, 0xac, 0x33, 0x44, 0xc5, 0xf3, 0x33, 0x40, 0x7a, 0x9a, 0x01, 0x6e, 0xfb, 0x19,
	0x80, 0x39, 0x6b, 0x95, 0xb2, 0xf8, 0xbc, 0xbb, 0xdd, 0x69, 0x0e, 0x30, 0xd9, 0xb5, 0x5d, 0x73,
	0x68, 0x0f, 0x30, 0xcf, 0x05, 0xe4, 0xb0, 0xc5, 0x2f, 0xb1, 0x3e, 0xe6, 0x62, 0xb3, 0xc9, 0x62,
	0xc1, 0xc7, 0x51, 0xbc, 0xda, 0x3f, 0x04, 0xc8, 0x28, 0x86, 0xf1, 0x76, 0x6a, 0xdf, 0x87, 0x65,
	0xdb, 0xc1, 0x87, 0x61, 0xd2, 0x74, 0x32, 0xe9, 0x12, 0xc1, 0x9b, 0x12, 0xbe, 0x6b, 0xeb, 0xfe,
	0x29, 0x40, 0x96, 0xc4, 0xf3, 0x77, 0x64, 0xde, 0x1a, 0x40, 0x88, 0x26, 0x93, 0x4c, 0x23, 0xea,
	0x01, 0xfe, 0xe2, 0x06, 0x7e, 0x29, 0x40, 0x9e, 0xed, 0xc1, 0xb7, 0x33, 0x31, 0xaa, 0x69, 0x7a,
	0x51, 0x4d, 0x33, 0xf3, 0x35, 0xfd, 0x4d, 0x06, 0xb2, 0x74, 0x37, 0xbe, 0x95, 0x9e, 0x1f, 0x40,
	0x76, 0xcf, 0xb1, 0x86, 0x91, 0x84, 0xda, 0xc3, 0x2f, 0xbd, 0x8e, 0x65, 0xe0, 0x1d, 0xcb, 0x55,
	0x29, 0x14, 0x5d, 0x86, 0xb4, 0x67, 0x71, 0xa5, 0x66, 0x71, 0xd2, 0x9e, 0x85, 0x76, 0xe1, 0xfc,
	0x54, 0xba, 0x5f, 0xed, 0xd1, 0xd3, 0x97, 0xe7, 0xaa, 0xdb, 0x09, 0x27, 0xd7, 0x5a, 0xa0, 0x07,
	0xad, 0xdb, 0x14, 0x82, 0xce, 0xca, 0xbb, 0xb3, 0xfa, 0x2c, 0x84, 0xa4, 0x1c, 0xdd, 0x1a, 0x79,
	0xa4, 0x5e, 0xc9, 0xb1, 0x94, 0xc3, 0x87, 0xf1, 0xd5, 0xcb, 0xcf, 0x5f, 0xbd, 0x27, 0x50, 0x3d,
	0x4a, 0x78, 0x42, 0xd9, 0x78, 0x2d, 0x5a, 0x36, 0xce, 0x70, 0x9e, 0x56, 0x8e, 0xb5, 0x57, 0x02,
	0xe4, 0xd9, 0x41, 0x7b, 0x3a, 0x1c, 0xb3, 0xf8, 0x16, 0xf8, 0x7d, 0x16, 0x8a, 0xfe, 0xb1, 0x7f,
	0x3a, 0x6c, 0xd8, 0x9b, 0x17, 0x5c, 0x77, 0x8f, 0xc8, 0x5a, 0xdf, 0x58, 0x80, 0x6d, 0x02, 0x68,
	0x9e, 0xe7, 0x98, 0xbb, 0x63, 0x0f, 0xbb, 0xd5, 0x3c, 0x15, 0x7a, 0xfd, 0x28, 0xa1, 0x4a, 0x80,
	0xc9, 0x64, 0x85, 0x48, 0xe3, 0xee, 0x28, 0x7c, 0x87, 0x91, 0xfa, 0x00, 0x96, 0x63, 0x9a, 0x26,
	0xf0, 0x3b, 0x17, 0xe6, 0x27, 0x86, 0xc9, 0xff, 0x92, 0x86, 0x1c, 0xcd, 0xf4, 0xa7, 0x23, 0x46,
	0x1a, 0x11, 0x0f, 0xb1, 0xb0, 0xf8, 0x20, 0xa9, 0x30, 0x59, 0xc4, 0x3d, 0xb9, 0xf9, 0xee, 0x79,
	0xcb, 0x55, 0xfc, 0x52, 0x80, 0xa2, 0x5f, 0xfe, 0xbc, 0xdd, 0x42, 0xde, 0x8e, 0x7a, 0x7e, 0xb1,
	0xd4, 0x3f, 0x3f, 0xdf, 0x04, 0xbf, 0xc4, 0x7f, 0x17, 0xe0, 0xcc, 0x0c, 0xdb, 0x58, 0xbe, 0x13,
	0xe6, 0xe6, 0xbb, 0x5b, 0x50, 0x24, 0x49, 0xf6, 0xb8, 0xec, 0x58, 0xa0, 0x08, 0x2c, 0x97, 0xb2,
	0x62, 0xf8, 0xd8, 0xac, 0xcf, 0x51, 0x14, 0x0f, 0xc9, 0x90, 0xf5, 0x26, 0x36, 0xab, 0xb0, 0x2b,
	0xfc, 0xd7, 0xe3, 0x0b, 0x62, 0x75, 0x6f, 0x62, 0x63, 0x95, 0xc2, 0xa6, 0x1e, 0xc9, 0xd1, 0x1f,
	0x05, 0x36, 0x90, 0x7f, 0x55, 0x86, 0x52, 0xc8, 0x36, 0xf4, 0x23, 0x28, 0x3d, 0x77, 0xad, 0x51,
	0xdf, 0xda, 0x7d, 0x4e, 0xca, 0x6a, 0x66, 0xd6, 0xfb, 0xf1, 0x95, 0xa5, 0xdf, 0xdb, 0x14, 0xa5,
	0x95, 0x52, 0x81, 0x50, 0xb0, 0x11, 0xfa, 0x0c, 0xe8, 0xa8, 0xaf, 0x39, 0x8e, 0xe6, 0xff, 0xb4,
	0xd6, 0x12, 0xc9, 0x15, 0x82, 0xd1, 0x4a, 0xa9, 0x22, 0xc1, 0xa7, 0x03, 0xf4, 0x29, 0x88, 0xb6,
	0x63, 0x0e, 0x4d, 0xcf, 0x0c, 0x7e, 0x2d, 0x66, 0x69, 0x77, 0x7c, 0x0c, 0x42, 0x1b, 0xa0, 0xa3,
	0x0f, 0x21, 0xeb, 0xe1, 0x97, 0x5e, 0xe4, 0x27, 0x23, 0x4c, 0x46, 0x76, 0x0f, 0xf9, 0x6f, 0x20,
	0x48, 0xe8, 0x13, 0xfe, 0x1b, 0x40, 0x29, 0x58, 0xc8, 0xbf, 0x37, 0x43, 0x41, 0x4e, 0x37, 0x4e,
	0x45, 0x7f, 0x04, 0xc8, 0x37, 0xfa, 0x01, 0x39, 0x30, 0xc7, 0x23, 0x0f, 0x3b, 0x3c, 0xe7, 0x56,
	0x67, 0xe8, 0xea, 0x0c, 0xde, 0x4a, 0xa9, 0x3e, 0x6a, 0xed, 0xcf, 0x02, 0xc0, 0x74, 0xc9, 0x90,
	0x0c, 0xb9, 0x91, 0x65, 0x04, 0x3f, 0xe3, 0xec, 0x4e, 0x46, 0x6d, 0xf5, 0xc8, 0xee, 0x56, 0x19,
	0x68, 0xe1, 0x72, 0x2a, 0x1c, 0x5e, 0x99, 0x85, 0xc2, 0x2b, 0x3b, 0x2f, 0xbc, 0x6a, 0x7f, 0x12,
	0x40, 0x0c, 0x5c, 0x76, 0x84, 0xf6, 0x9b, 0xca, 0x69, 0xd5, 0xfe, 0x6f, 0x02, 0x88, 0x41, 0xd0,
	0x04, 0x5b, 0x45, 0x38, 0xc9, 0x56, 0x49, 0x87, 0xb6, 0xca, 0xc2, 0xa5, 0x78, 0xd8, 0xa6, 0xec,
	0x42, 0x36, 0xe5, 0xe6, 0xda, 0xf4, 0x47, 0x01, 0xb2, 0x34, 0x1e, 0xaf, 0x46, 0x9d, 0xb1, 0x14,
	0xc9, 0x14, 0xa7, 0xd1, 0x1b, 0xaf, 0x04, 0x56, 0x6b, 0x51, 0xed, 0xaf, 0x47, 0xb5, 0x3f, 0xc3,
	0x42, 0x89, 0x43, 0x4f, 0xab, 0x05, 0x5f, 0x09, 0x50, 0xe0, 0x7b, 0xfc, 0xff, 0x23, 0x9a, 0x48,
	0xa2, 0xdb, 0x20, 0x89, 0x6e, 0x13, 0x0a, 0xfc, 0x14, 0x4a, 0xc8, 0xe8, 0xb7, 0xa0, 0x80, 0xd9,
	0x09, 0x17, 0xa9, 0x5c, 0x42, 0x27, 0x9f, 0xea, 0x23, 0xc8, 0x4f, 0xa0, 0xc0, 0x0f, 0x04, 0x74,
	0x19, 0xb2, 0x23, 0x72, 0xca, 0x0a, 0xa1, 0xeb, 0x67, 0xff, 0xb0, 0xa0, 0x90, 0x85, 0x18, 0xff,
	0x4e, 0x80, 0xa2, 0x1f, 0x1b, 0xe8, 0x7b, 0xa1, 0xfb, 0xba, 0xe5, 0x48, 0xe0, 0xf3, 0x1b, 0xbb,
	0xc4, 0x22, 0x64, 0xe1, 0xe4, 0x7a, 0x07, 0x4a, 0xe6, 0xc8, 0xed, 0xd3, 0xff, 0x77, 0xd3, 0x88,
	0x2e, 0xfe, 0x54, 0x9e, 0x68, 0x8e, 0xdc, 0x1d, 0x07, 0x1f, 0xb6, 0x0d, 0xf9, 0x39, 0x48, 0xe1,
	0x18, 0x26, 0xc5, 0xd2, 0x49, 0x2b, 0x24, 0xa2, 0xdc, 0x98, 0x5e, 0x22, 0x1f, 0xab, 0x1c, 0x47,
	0x51, 0x3c, 0xf9, 0x55, 0x1a, 0xca, 0x61, 0x61, 0xf3, 0x17, 0x45, 0x89, 0x94, 0x8d, 0xec, 0x6a,
	0xfb, 0xca, 0xcc, 0xc6, 0x3b, 0xb6, 0x66, 0x3c, 0x17, 0xbe, 0x73, 0x39, 0x62, 0x5d, 0xb3, 0x8b,
	0xae, 0x6b, 0x6e, 0xde, 0xba, 0xd6, 0x7a, 0x27, 0x29, 0x3c, 0x3f, 0x8c, 0x16, 0x85, 0x2b, 0x33,
	0x96, 0x11, 0x16, 0xa1, 0x7a, 0x54, 0xee, 0x01, 0x4c, 0xc5, 0x2d, 0x5c, 0xd5, 0xad, 0x42, 0xde,
	0xda, 0xdb, 0x73, 0x31, 0x8b, 0xdd, 0x9c, 0xca, 0x47, 0xf2, 0x2f, 0x05, 0x28, 0xfa, 0x7d, 0x00,
	0xb2, 0x5e, 0xfa, 0xc0, 0xd2, 0x0f, 0x28, 0xbf, 0x9c, 0xca, 0x06, 0xa4, 0x62, 0x21, 0x50, 0xee,
	0x02, 0x76, 0x43, 0xe8, 0x93, 0xac, 0x35, 0x34, 0x4f, 0x63, 0x0b, 0x4f, 0x91, 0x6a, 0xf7, 0x41,
	0x0c, 0xa6, 0x16, 0x29, 0xb7, 0xe5, 0x3a, 0xe4, 0x59, 0x7b, 0x03, 0x55, 0x82, 0xc8, 0x28, 0xd3,
	0x40, 0xb8, 0x09, 0xc5, 0x21, 0x17, 0x17, 0x69, 0x73, 0x05, 0xed, 0x8b, 0x00, 0x2c, 0xdf, 0x85,
	0x02, 0x6f, 0x19, 0xd1, 0x2b, 0x79, 0xf6, 0x19, 0x6d, 0x25, 0xb0, 0x16, 0x8a, 0x0f, 0x93, 0xdb,
	0x50, 0x0a, 0xb5, 0x08, 0xd0, 0x25, 0x00, 0xdd, 0x1a, 0x0c, 0xb0, 0x1e, 0x74, 0xe8, 0x44, 0x35,
	0x34, 0x83, 0x6a, 0x50, 0xf4, 0x9b, 0x08, 0xdc, 0x84, 0x60, 0x2c, 0x77, 0x00, 0xa6, 0xad, 0x03,
	0x74, 0x05, 0xc0, 0xc5, 0xce, 0x21, 0x76, 0x82, 0xfb, 0x72, 0x76, 0x27, 0x2e, 0xb2, 0xd9, 0x2e,
	0x7e, 0x11, 0xbb, 0x52, 0x4f, 0xc7, 0xae, 0xd4, 0xe5, 0x5f, 0x40, 0x29, 0xf4, 0x2b, 0xf5, 0x4d,
	0x79, 0x1c, 0x5d, 0x87, 0x65, 0x07, 0x0f, 0x34, 0x52, 0x64, 0xf4, 0x39, 0x42, 0x86, 0x22, 0x54,
	0xfc, 0xe9, 0x6d, 0x16, 0x1a, 0x3a, 0xc0, 0x94, 0x73, 0xf8, 0x82, 0x5f, 0x98, 0xbd, 0xe0, 0xbf,
	0x00, 0xa2, 0x81, 0x07, 0xa4, 0x76, 0xc1, 0x8e, 0x6f, 0x49, 0x30, 0x71, 0xdc, 0xf5, 0xff, 0xaf,
	0x05, 0x28, 0xfa, 0xfd, 0x4a, 0x74, 0x2d, 0x92, 0xa5, 0xce, 0x44, 0x9a, 0x99, 0xa1, 0x44, 0x75,
	0x13, 0xc4, 0xe0, 0x2d, 0x03, 0x8f, 0x88, 0x88, 0x73, 0xa7, 0xd0, 0xd9, 0x16, 0x59, 0xe6, 0x24,
	0x2d, 0xb2, 0x5b, 0x5f, 0x09, 0x20, 0x06, 0xe9, 0x11, 0x15, 0x21, 0xdb, 0x79, 0xfc, 0xe8, 0x91,
	0x94, 0x42, 0x25, 0x28, 0x6c, 0x6c, 0x6f, 0x3f, 0x6a, 0x2a, 0x1d, 0x49, 0x20, 0x83, 0x76, 0xa7,
	0xd7, 0xdc, 0x6c, 0xaa, 0x52, 0x9a, 0xe0, 0x3c, 0xda, 0xee, 0x6c, 0x4a, 0x19, 0x04, 0x90, 0x6f,
	0x6c, 0x3f, 0xde, 0x78, 0xd4, 0x94, 0xb2, 0xe4, 0xbb, 0xdb, 0x53, 0xdb, 0x9d, 0x4d, 0x29, 0x87,
	0x44, 0xc8, 0x6d, 0x3c, 0xed, 0x35, 0xbb, 0x52, 0x9e, 0x20, 0x37, 0x94, 0x5e, 0x53, 0x2a, 0xa0,
	0x65, 0xf6, 0x57, 0xd3, 0xdf, 0xde, 0xf8, 0xbc, 0x59, 0xef, 0x49, 0x45, 0x54, 0x61, 0x05, 0x78,
	0x5f, 0x51, 0x55, 0xe5, 0xa9, 0x24, 0x12, 0xd4, 0x5e, 0xf3, 0xa7, 0x3d, 0x09, 0xd0, 0x12, 0x88,
	0x6a, 0xbb, 0xde, 0xea, 0xd3, 0x61, 0x89, 0x50, 0x72, 0xe9, 0xfd, 0x7a, 0xa7, 0x27, 0x95, 0x51,
	0x19, 0x8a, 0x44, 0x03, 0x3a, 0x5a, 0x22, 0x7c, 0x98, 0x16, 0x74, 0x5c, 0xb9, 0x75, 0x00, 0xe5,
	0xf0, 0x4a, 0xa2, 0x15, 0x38, 0xd3, 0xd8, 0xae, 0x3f, 0xde, 0x6a, 0x76, 0x7a, 0xdd, 0x7e, 0xbd,
	0xa5, 0x74, 0x36, 0x9b, 0x0d, 0x29, 0x15, 0x9d, 0x7e, 0xa2, 0xf4, 0xea, 0xad, 0x66, 0x43, 0x12,
	0xd0, 0x79, 0x38, 0x3b, 0x9d, 0x7e, 0xdc, 0xf1, 0x01, 0x69, 0x74, 0x0e, 0xa4, 0xad, 0x66, 0x4f,
	0x69, 0x28, 0x3d, 0x25, 0xe0, 0x92, 0x59, 0xff, 0x3a, 0x0b, 0xf9, 0xa7, 0xf4, 0xbd, 0x0a, 0x7a,
	0x08, 0x95, 0xe8, 0x8b, 0x0f, 0xc4, 0xfe, 0x94, 0x12, 0x9f, 0x8f, 0xd4, 0xde, 0x4f, 0x84, 0xf1,
	0xee, 0x64, 0x0a, 0xfd, 0x04, 0xa4, 0xf8, 0x83, 0x0d, 0x74, 0x81, 0xb9, 0x32, 0xf9, 0xfd, 0x47,
	0xed, 0xe2, 0x11, 0xd0, 0x80, 0xe5, 0x43, 0xa8, 0x44, 0x9b, 0xa1, 0x5c, 0xbf, 0xc4, 0xb6, 0x2c,
	0xd7, 0xef, 0x88, 0xee, 0x29, 0x65, 0x16, 0x7d, 0xaf, 0xe1, 0x1b, 0x9b, 0xf4, 0x58, 0xc4, 0x37,
	0x36, 0xf1, 0x81, 0x07, 0x63, 0x16, 0x7d, 0x2b, 0xc1, 0x99, 0x25, 0x3e, 0xd4, 0xe0, 0xcc, 0x92,
	0x1f, 0x57, 0xc8, 0x29, 0xb4, 0x05, 0x95, 0x68, 0x43, 0x9f, 0x33, 0x4b, 0x7c, 0x22, 0xc1, 0x99,
	0x25, 0xbf, 0x00, 0x90, 0x53, 0x77, 0x05, 0xf4, 0x43, 0x28, 0xfa, 0xad, 0x71, 0xc4, 0x7a, 0x4c,
	0xb1, 0x5e, 0x7c, 0x6d, 0x25, 0x36, 0x1b, 0x68, 0xd2, 0x84, 0x72, 0xb8, 0xf5, 0x8b, 0xd8, 0x7f,
	0x69, 0x42, 0xdb, 0xb9, 0xf6, 0x5e, 0x02, 0xc4, 0x67, 0xb3, 0xfe, 0x05, 0x39, 0xe9, 0xc7, 0x2e,
	0x39, 0x5d, 0x1e, 0x42, 0x25, 0xfa, 0x4c, 0x89, 0xdb, 0x96, 0xf8, 0x38, 0x8a, 0xdb, 0x76, 0xc4,
	0xbb, 0xa6, 0xd4, 0x86, 0xf4, 0xfa, 0xcd, 0x25, 0xe1, 0xaf, 0x6f, 0x2e, 0x09, 0x5f, 0xbf, 0xb9,
	0x24, 0xfc, 0xf6, 0x5f, 0x97, 0x52, 0xbb, 0x79, 0xfa, 0xe4, 0xea, 0xa3, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x12, 0xcc, 0x2a, 0xa2, 0x86, 0x25, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// YorkieClient is the client API for Yorkie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YorkieClient interface {
	ActivateClient(ctx context.Context, in *ActivateClientRequest, opts ...grpc.CallOption) (*ActivateClientResponse, error)
	DeactivateClient(ctx context.Context, in *DeactivateClientRequest, opts ...grpc.CallOption) (*DeactivateClientResponse, error)
	UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*UpdateMetadataResponse, error)
	AttachDocument(ctx context.Context, in *AttachDocumentRequest, opts ...grpc.CallOption) (*AttachDocumentResponse, error)
	DetachDocument(ctx context.Context, in *DetachDocumentRequest, opts ...grpc.CallOption) (*DetachDocumentResponse, error)
	WatchDocuments(ctx context.Context, in *WatchDocumentsRequest, opts ...grpc.CallOption) (Yorkie_WatchDocumentsClient, error)
	PushPull(ctx context.Context, in *PushPullRequest, opts ...grpc.CallOption) (*PushPullResponse, error)
	FetchHistory(ctx context.Context, in *FetchHistoryRequest, opts ...grpc.CallOption) (*FetchHistoryResponse, error)
}

type yorkieClient struct {
	cc *grpc.ClientConn
}

func NewYorkieClient(cc *grpc.ClientConn) YorkieClient {
	return &yorkieClient{cc}
}

func (c *yorkieClient) ActivateClient(ctx context.Context, in *ActivateClientRequest, opts ...grpc.CallOption) (*ActivateClientResponse, error) {
	out := new(ActivateClientResponse)
	err := c.cc.Invoke(ctx, "/api.Yorkie/ActivateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yorkieClient) DeactivateClient(ctx context.Context, in *DeactivateClientRequest, opts ...grpc.CallOption) (*DeactivateClientResponse, error) {
	out := new(DeactivateClientResponse)
	err := c.cc.Invoke(ctx, "/api.Yorkie/DeactivateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yorkieClient) UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*UpdateMetadataResponse, error) {
	out := new(UpdateMetadataResponse)
	err := c.cc.Invoke(ctx, "/api.Yorkie/UpdateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yorkieClient) AttachDocument(ctx context.Context, in *AttachDocumentRequest, opts ...grpc.CallOption) (*AttachDocumentResponse, error) {
	out := new(AttachDocumentResponse)
	err := c.cc.Invoke(ctx, "/api.Yorkie/AttachDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yorkieClient) DetachDocument(ctx context.Context, in *DetachDocumentRequest, opts ...grpc.CallOption) (*DetachDocumentResponse, error) {
	out := new(DetachDocumentResponse)
	err := c.cc.Invoke(ctx, "/api.Yorkie/DetachDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yorkieClient) WatchDocuments(ctx context.Context, in *WatchDocumentsRequest, opts ...grpc.CallOption) (Yorkie_WatchDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Yorkie_serviceDesc.Streams[0], "/api.Yorkie/WatchDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &yorkieWatchDocumentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Yorkie_WatchDocumentsClient interface {
	Recv() (*WatchDocumentsResponse, error)
	grpc.ClientStream
}

type yorkieWatchDocumentsClient struct {
	grpc.ClientStream
}

func (x *yorkieWatchDocumentsClient) Recv() (*WatchDocumentsResponse, error) {
	m := new(WatchDocumentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yorkieClient) PushPull(ctx context.Context, in *PushPullRequest, opts ...grpc.CallOption) (*PushPullResponse, error) {
	out := new(PushPullResponse)
	err := c.cc.Invoke(ctx, "/api.Yorkie/PushPull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yorkieClient) FetchHistory(ctx context.Context, in *FetchHistoryRequest, opts ...grpc.CallOption) (*FetchHistoryResponse, error) {
	out := new(FetchHistoryResponse)
	err := c.cc.Invoke(ctx, "/api.Yorkie/FetchHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YorkieServer is the server API for Yorkie service.
type YorkieServer interface {
	ActivateClient(context.Context, *ActivateClientRequest) (*ActivateClientResponse, error)
	DeactivateClient(context.Context, *DeactivateClientRequest) (*DeactivateClientResponse, error)
	UpdateMetadata(context.Context, *UpdateMetadataRequest) (*UpdateMetadataResponse, error)
	AttachDocument(context.Context, *AttachDocumentRequest) (*AttachDocumentResponse, error)
	DetachDocument(context.Context, *DetachDocumentRequest) (*DetachDocumentResponse, error)
	WatchDocuments(*WatchDocumentsRequest, Yorkie_WatchDocumentsServer) error
	PushPull(context.Context, *PushPullRequest) (*PushPullResponse, error)
	FetchHistory(context.Context, *FetchHistoryRequest) (*FetchHistoryResponse, error)
}

// UnimplementedYorkieServer can be embedded to have forward compatible implementations.
type UnimplementedYorkieServer struct {
}

func (*UnimplementedYorkieServer) ActivateClient(ctx context.Context, req *ActivateClientRequest) (*ActivateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateClient not implemented")
}
func (*UnimplementedYorkieServer) DeactivateClient(ctx context.Context, req *DeactivateClientRequest) (*DeactivateClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateClient not implemented")
}
func (*UnimplementedYorkieServer) UpdateMetadata(ctx context.Context, req *UpdateMetadataRequest) (*UpdateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (*UnimplementedYorkieServer) AttachDocument(ctx context.Context, req *AttachDocumentRequest) (*AttachDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachDocument not implemented")
}
func (*UnimplementedYorkieServer) DetachDocument(ctx context.Context, req *DetachDocumentRequest) (*DetachDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachDocument not implemented")
}
func (*UnimplementedYorkieServer) WatchDocuments(req *WatchDocumentsRequest, srv Yorkie_WatchDocumentsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchDocuments not implemented")
}
func (*UnimplementedYorkieServer) PushPull(ctx context.Context, req *PushPullRequest) (*PushPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushPull not implemented")
}
func (*UnimplementedYorkieServer) FetchHistory(ctx context.Context, req *FetchHistoryRequest) (*FetchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchHistory not implemented")
}

func RegisterYorkieServer(s *grpc.Server, srv YorkieServer) {
	s.RegisterService(&_Yorkie_serviceDesc, srv)
}

func _Yorkie_ActivateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YorkieServer).ActivateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Yorkie/ActivateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YorkieServer).ActivateClient(ctx, req.(*ActivateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yorkie_DeactivateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YorkieServer).DeactivateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Yorkie/DeactivateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YorkieServer).DeactivateClient(ctx, req.(*DeactivateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yorkie_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YorkieServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Yorkie/UpdateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YorkieServer).UpdateMetadata(ctx, req.(*UpdateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yorkie_AttachDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YorkieServer).AttachDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Yorkie/AttachDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YorkieServer).AttachDocument(ctx, req.(*AttachDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yorkie_DetachDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YorkieServer).DetachDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Yorkie/DetachDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YorkieServer).DetachDocument(ctx, req.(*DetachDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yorkie_WatchDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDocumentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YorkieServer).WatchDocuments(m, &yorkieWatchDocumentsServer{stream})
}

type Yorkie_WatchDocumentsServer interface {
	Send(*WatchDocumentsResponse) error
	grpc.ServerStream
}

type yorkieWatchDocumentsServer struct {
	grpc.ServerStream
}

func (x *yorkieWatchDocumentsServer) Send(m *WatchDocumentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Yorkie_PushPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YorkieServer).PushPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Yorkie/PushPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YorkieServer).PushPull(ctx, req.(*PushPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yorkie_FetchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YorkieServer).FetchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Yorkie/FetchHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YorkieServer).FetchHistory(ctx, req.(*FetchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Yorkie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Yorkie",
	HandlerType: (*YorkieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateClient",
			Handler:    _Yorkie_ActivateClient_Handler,
		},
		{
			MethodName: "DeactivateClient",
			Handler:    _Yorkie_DeactivateClient_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _Yorkie_UpdateMetadata_Handler,
		},
		{
			MethodName: "AttachDocument",
			Handler:    _Yorkie_AttachDocument_Handler,
		},
		{
			MethodName: "DetachDocument",
			Handler:    _Yorkie_DetachDocument_Handler,
		},
		{
			MethodName: "PushPull",
			Handler:    _Yorkie_PushPull_Handler,
		},
		{
			MethodName: "FetchHistory",
			Handler:    _Yorkie_FetchHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDocuments",
			Handler:       _Yorkie_WatchDocuments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/yorkie.proto",
}

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	BroadcastEvent(ctx context.Context, in *BroadcastEventRequest, opts ...grpc.CallOption) (*BroadcastEventResponse, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) BroadcastEvent(ctx context.Context, in *BroadcastEventRequest, opts ...grpc.CallOption) (*BroadcastEventResponse, error) {
	out := new(BroadcastEventResponse)
	err := c.cc.Invoke(ctx, "/api.Cluster/BroadcastEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	BroadcastEvent(context.Context, *BroadcastEventRequest) (*BroadcastEventResponse, error)
}

// UnimplementedClusterServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (*UnimplementedClusterServer) BroadcastEvent(ctx context.Context, req *BroadcastEventRequest) (*BroadcastEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastEvent not implemented")
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_BroadcastEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).BroadcastEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Cluster/BroadcastEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).BroadcastEvent(ctx, req.(*BroadcastEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastEvent",
			Handler:    _Cluster_BroadcastEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/yorkie.proto",
}

func (m *BroadcastEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublisherId) > 0 {
		i -= len(m.PublisherId)
		copy(dAtA[i:], m.PublisherId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.PublisherId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ActivateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivateClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientKey) > 0 {
		i -= len(m.ClientKey)
		copy(dAtA[i:], m.ClientKey)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivateClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivateClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivateClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientKey) > 0 {
		i -= len(m.ClientKey)
		copy(dAtA[i:], m.ClientKey)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeactivateClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateClientRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeactivateClientRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeactivateClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeactivateClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeactivateClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttachDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttachDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttachDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangePack != nil {
		{
			size, err := m.ChangePack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AttachDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttachDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttachDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangePack != nil {
		{
			size, err := m.ChangePack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetachDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetachDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetachDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangePack != nil {
		{
			size, err := m.ChangePack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DetachDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetachDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DetachDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangePack != nil {
		{
			size, err := m.ChangePack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientKey) > 0 {
		i -= len(m.ClientKey)
		copy(dAtA[i:], m.ClientKey)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchDocumentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchDocumentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchDocumentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DocumentKeys) > 0 {
		for iNdEx := len(m.DocumentKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocumentKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchDocumentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchDocumentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchDocumentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WatchDocumentsResponse_Initialization_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchDocumentsResponse_Initialization_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Initialization != nil {
		{
			size, err := m.Initialization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WatchDocumentsResponse_Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchDocumentsResponse_Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WatchDocumentsResponse_Initialization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchDocumentsResponse_Initialization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchDocumentsResponse_Initialization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PeersMapByDoc) > 0 {
		for k := range m.PeersMapByDoc {
			v := m.PeersMapByDoc[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintYorkie(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintYorkie(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintYorkie(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PushPullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangePack != nil {
		{
			size, err := m.ChangePack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushPullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPullResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPullResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChangePack != nil {
		{
			size, err := m.ChangePack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DocumentKeys) > 0 {
		for iNdEx := len(m.DocumentKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocumentKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *FetchHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DocumentKey != nil {
		{
			size, err := m.DocumentKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChangePack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangePack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinSyncedTicket != nil {
		{
			size, err := m.MinSyncedTicket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Snapshot) > 0 {
		i -= len(m.Snapshot)
		copy(dAtA[i:], m.Snapshot)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Snapshot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Checkpoint != nil {
		{
			size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DocumentKey != nil {
		{
			size, err := m.DocumentKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActorId) > 0 {
		i -= len(m.ActorId)
		copy(dAtA[i:], m.ActorId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ActorId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Lamport != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Lamport))
		i--
		dAtA[i] = 0x10
	}
	if m.ClientSeq != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.ClientSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Set_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Set_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Set != nil {
		{
			size, err := m.Set.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Operation_Add_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Add_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Add != nil {
		{
			size, err := m.Add.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Operation_Move_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Move_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Move != nil {
		{
			size, err := m.Move.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Operation_Remove_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Remove_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Remove != nil {
		{
			size, err := m.Remove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Operation_Edit_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Edit_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Edit != nil {
		{
			size, err := m.Edit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Operation_Select_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Select_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Select != nil {
		{
			size, err := m.Select.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Operation_RichEdit_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_RichEdit_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RichEdit != nil {
		{
			size, err := m.RichEdit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Operation_Style_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Style_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Style != nil {
		{
			size, err := m.Style.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Operation_Increase_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Increase_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Increase != nil {
		{
			size, err := m.Increase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Operation_Set) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_Set) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Set) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Add) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_Add) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Add) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PrevCreatedAt != nil {
		{
			size, err := m.PrevCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Move) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_Move) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Move) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PrevCreatedAt != nil {
		{
			size, err := m.PrevCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Remove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_Remove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Remove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Edit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_Edit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Edit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatedAtMapByActor) > 0 {
		for k := range m.CreatedAtMapByActor {
			v := m.CreatedAtMapByActor[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintYorkie(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintYorkie(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintYorkie(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Select) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_Select) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Select) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation_RichEdit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_RichEdit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_RichEdit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintYorkie(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintYorkie(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintYorkie(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatedAtMapByActor) > 0 {
		for k := range m.CreatedAtMapByActor {
			v := m.CreatedAtMapByActor[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintYorkie(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintYorkie(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintYorkie(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Style) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_Style) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Style) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintYorkie(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintYorkie(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintYorkie(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Increase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation_Increase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Increase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExecutedAt != nil {
		{
			size, err := m.ExecutedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ParentCreatedAt != nil {
		{
			size, err := m.ParentCreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JSONElementSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSONElementSimple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElementSimple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MovedAt != nil {
		{
			size, err := m.MovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JSONElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSONElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *JSONElement_JsonObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_JsonObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsonObject != nil {
		{
			size, err := m.JsonObject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *JSONElement_JsonArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_JsonArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsonArray != nil {
		{
			size, err := m.JsonArray.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *JSONElement_Primitive_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_Primitive_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Primitive != nil {
		{
			size, err := m.Primitive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *JSONElement_Text_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_Text_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *JSONElement_RichText_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_RichText_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RichText != nil {
		{
			size, err := m.RichText.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *JSONElement_Counter_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_Counter_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Counter != nil {
		{
			size, err := m.Counter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *JSONElement_JSONObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSONElement_JSONObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_JSONObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MovedAt != nil {
		{
			size, err := m.MovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JSONElement_JSONArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSONElement_JSONArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_JSONArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MovedAt != nil {
		{
			size, err := m.MovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JSONElement_Primitive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSONElement_Primitive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_Primitive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MovedAt != nil {
		{
			size, err := m.MovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JSONElement_Text) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSONElement_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MovedAt != nil {
		{
			size, err := m.MovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JSONElement_RichText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSONElement_RichText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_RichText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MovedAt != nil {
		{
			size, err := m.MovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JSONElement_Counter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JSONElement_Counter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JSONElement_Counter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MovedAt != nil {
		{
			size, err := m.MovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RHTNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RHTNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RHTNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Element != nil {
		{
			size, err := m.Element.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RGANode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RGANode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RGANode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Element != nil {
		{
			size, err := m.Element.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Next != nil {
		{
			size, err := m.Next.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InsPrevId != nil {
		{
			size, err := m.InsPrevId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RichTextNodeAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RichTextNodeAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RichTextNodeAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RichTextNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RichTextNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RichTextNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InsPrevId != nil {
		{
			size, err := m.InsPrevId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RemovedAt != nil {
		{
			size, err := m.RemovedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintYorkie(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintYorkie(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintYorkie(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextNodeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextNodeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextNodeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintYorkie(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintYorkie(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintYorkie(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Clock != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Client) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Clients) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clients) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Clients) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Clients) > 0 {
		for iNdEx := len(m.Clients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Clients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DocumentKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Document) > 0 {
		i -= len(m.Document)
		copy(dAtA[i:], m.Document)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Document)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Checkpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checkpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Checkpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ClientSeq != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.ClientSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.ServerSeq != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.ServerSeq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextNodePos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextNodePos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextNodePos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RelativeOffset != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.RelativeOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeTicket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeTicket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeTicket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ActorId) > 0 {
		i -= len(m.ActorId)
		copy(dAtA[i:], m.ActorId)
		i = encodeVarintYorkie(dAtA, i, uint64(len(m.ActorId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Delimiter != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Delimiter))
		i--
		dAtA[i] = 0x10
	}
	if m.Lamport != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Lamport))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DocumentKeys) > 0 {
		for iNdEx := len(m.DocumentKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocumentKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYorkie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Publisher != nil {
		{
			size, err := m.Publisher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYorkie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintYorkie(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintYorkie(dAtA []byte, offset int, v uint64) int {
	offset -= sovYorkie(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BroadcastEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublisherId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BroadcastEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivateClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientKey)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActivateClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientKey)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeactivateClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeactivateClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttachDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ChangePack != nil {
		l = m.ChangePack.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AttachDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ChangePack != nil {
		l = m.ChangePack.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DetachDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ChangePack != nil {
		l = m.ChangePack.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DetachDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientKey)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ChangePack != nil {
		l = m.ChangePack.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WatchDocumentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.DocumentKeys) > 0 {
		for _, e := range m.DocumentKeys {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WatchDocumentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WatchDocumentsResponse_Initialization_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Initialization != nil {
		l = m.Initialization.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *WatchDocumentsResponse_Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *WatchDocumentsResponse_Initialization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeersMapByDoc) > 0 {
		for k, v := range m.PeersMapByDoc {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovYorkie(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovYorkie(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovYorkie(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushPullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ChangePack != nil {
		l = m.ChangePack.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushPullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ChangePack != nil {
		l = m.ChangePack.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.DocumentKeys) > 0 {
		for _, e := range m.DocumentKeys {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.DocumentKey != nil {
		l = m.DocumentKey.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FetchHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangePack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DocumentKey != nil {
		l = m.DocumentKey.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Checkpoint != nil {
		l = m.Checkpoint.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	l = len(m.Snapshot)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.MinSyncedTicket != nil {
		l = m.MinSyncedTicket.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientSeq != 0 {
		n += 1 + sovYorkie(uint64(m.ClientSeq))
	}
	if m.Lamport != 0 {
		n += 1 + sovYorkie(uint64(m.Lamport))
	}
	l = len(m.ActorId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Set_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_Add_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Add != nil {
		l = m.Add.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_Move_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Move != nil {
		l = m.Move.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_Remove_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Remove != nil {
		l = m.Remove.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_Edit_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Edit != nil {
		l = m.Edit.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_Select_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_RichEdit_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RichEdit != nil {
		l = m.RichEdit.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_Style_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Style != nil {
		l = m.Style.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_Increase_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Increase != nil {
		l = m.Increase.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *Operation_Set) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Add) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.PrevCreatedAt != nil {
		l = m.PrevCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Move) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.PrevCreatedAt != nil {
		l = m.PrevCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Remove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Edit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.CreatedAtMapByActor) > 0 {
		for k, v := range m.CreatedAtMapByActor {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovYorkie(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovYorkie(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovYorkie(uint64(mapEntrySize))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_RichEdit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.CreatedAtMapByActor) > 0 {
		for k, v := range m.CreatedAtMapByActor {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovYorkie(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovYorkie(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovYorkie(uint64(mapEntrySize))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovYorkie(uint64(len(k))) + 1 + len(v) + sovYorkie(uint64(len(v)))
			n += mapEntrySize + 1 + sovYorkie(uint64(mapEntrySize))
		}
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Style) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovYorkie(uint64(len(k))) + 1 + len(v) + sovYorkie(uint64(len(v)))
			n += mapEntrySize + 1 + sovYorkie(uint64(mapEntrySize))
		}
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Increase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentCreatedAt != nil {
		l = m.ParentCreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.ExecutedAt != nil {
		l = m.ExecutedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JSONElementSimple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.MovedAt != nil {
		l = m.MovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovYorkie(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JSONElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JSONElement_JsonObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsonObject != nil {
		l = m.JsonObject.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *JSONElement_JsonArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsonArray != nil {
		l = m.JsonArray.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *JSONElement_Primitive_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Primitive != nil {
		l = m.Primitive.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *JSONElement_Text_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *JSONElement_RichText_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RichText != nil {
		l = m.RichText.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *JSONElement_Counter_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	return n
}
func (m *JSONElement_JSONObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.MovedAt != nil {
		l = m.MovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JSONElement_JSONArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.MovedAt != nil {
		l = m.MovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JSONElement_Primitive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovYorkie(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.MovedAt != nil {
		l = m.MovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JSONElement_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.MovedAt != nil {
		l = m.MovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JSONElement_RichText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.MovedAt != nil {
		l = m.MovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JSONElement_Counter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovYorkie(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.MovedAt != nil {
		l = m.MovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RHTNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Element != nil {
		l = m.Element.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RGANode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Next != nil {
		l = m.Next.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Element != nil {
		l = m.Element.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TextNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.InsPrevId != nil {
		l = m.InsPrevId.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RichTextNodeAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RichTextNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovYorkie(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovYorkie(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovYorkie(uint64(mapEntrySize))
		}
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.RemovedAt != nil {
		l = m.RemovedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.InsPrevId != nil {
		l = m.InsPrevId.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TextNodeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovYorkie(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != 0 {
		n += 1 + sovYorkie(uint64(m.Clock))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovYorkie(uint64(len(k))) + 1 + len(v) + sovYorkie(uint64(len(v)))
			n += mapEntrySize + 1 + sovYorkie(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Client) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Clients) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Clients) > 0 {
		for _, e := range m.Clients {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DocumentKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	l = len(m.Document)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Checkpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerSeq != 0 {
		n += 1 + sovYorkie(uint64(m.ServerSeq))
	}
	if m.ClientSeq != 0 {
		n += 1 + sovYorkie(uint64(m.ClientSeq))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TextNodePos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovYorkie(uint64(m.Offset))
	}
	if m.RelativeOffset != 0 {
		n += 1 + sovYorkie(uint64(m.RelativeOffset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimeTicket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lamport != 0 {
		n += 1 + sovYorkie(uint64(m.Lamport))
	}
	if m.Delimiter != 0 {
		n += 1 + sovYorkie(uint64(m.Delimiter))
	}
	l = len(m.ActorId)
	if l > 0 {
		n += 1 + l + sovYorkie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DocEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovYorkie(uint64(m.Type))
	}
	if m.Publisher != nil {
		l = m.Publisher.Size()
		n += 1 + l + sovYorkie(uint64(l))
	}
	if len(m.DocumentKeys) > 0 {
		for _, e := range m.DocumentKeys {
			l = e.Size()
			n += 1 + l + sovYorkie(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovYorkie(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYorkie(x uint64) (n int) {
	return sovYorkie(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BroadcastEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherId = append(m.PublisherId[:0], dAtA[iNdEx:postIndex]...)
			if m.PublisherId == nil {
				m.PublisherId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &DocEvent{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivateClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivateClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivateClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeactivateClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeactivateClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeactivateClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeactivateClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeactivateClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttachDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttachDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttachDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePack == nil {
				m.ChangePack = &ChangePack{}
			}
			if err := m.ChangePack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttachDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttachDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttachDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePack == nil {
				m.ChangePack = &ChangePack{}
			}
			if err := m.ChangePack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetachDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetachDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetachDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePack == nil {
				m.ChangePack = &ChangePack{}
			}
			if err := m.ChangePack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetachDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetachDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetachDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePack == nil {
				m.ChangePack = &ChangePack{}
			}
			if err := m.ChangePack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchDocumentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchDocumentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchDocumentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentKeys = append(m.DocumentKeys, &DocumentKey{})
			if err := m.DocumentKeys[len(m.DocumentKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchDocumentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchDocumentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchDocumentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WatchDocumentsResponse_Initialization{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WatchDocumentsResponse_Initialization_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WatchDocumentsResponse_Event{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchDocumentsResponse_Initialization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Initialization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Initialization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeersMapByDoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeersMapByDoc == nil {
				m.PeersMapByDoc = make(map[string]*Clients)
			}
			var mapkey string
			var mapvalue *Clients
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYorkie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthYorkie
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthYorkie
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Clients{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYorkie(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthYorkie
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PeersMapByDoc[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePack == nil {
				m.ChangePack = &ChangePack{}
			}
			if err := m.ChangePack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangePack == nil {
				m.ChangePack = &ChangePack{}
			}
			if err := m.ChangePack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &Client{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentKeys = append(m.DocumentKeys, &DocumentKey{})
			if err := m.DocumentKeys[len(m.DocumentKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = append(m.ClientId[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientId == nil {
				m.ClientId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DocumentKey == nil {
				m.DocumentKey = &DocumentKey{}
			}
			if err := m.DocumentKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &Change{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DocumentKey == nil {
				m.DocumentKey = &DocumentKey{}
			}
			if err := m.DocumentKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoint == nil {
				m.Checkpoint = &Checkpoint{}
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshot = append(m.Snapshot[:0], dAtA[iNdEx:postIndex]...)
			if m.Snapshot == nil {
				m.Snapshot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &Change{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSyncedTicket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinSyncedTicket == nil {
				m.MinSyncedTicket = &TimeTicket{}
			}
			if err := m.MinSyncedTicket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ChangeID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSeq", wireType)
			}
			m.ClientSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lamport", wireType)
			}
			m.Lamport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lamport |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorId = append(m.ActorId[:0], dAtA[iNdEx:postIndex]...)
			if m.ActorId == nil {
				m.ActorId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_Set{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_Set_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_Add{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_Add_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Move", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_Move{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_Move_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_Remove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_Remove_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_Edit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_Edit_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_Select{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_Select_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RichEdit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_RichEdit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_RichEdit_{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_Style{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_Style_{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Operation_Increase{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &Operation_Increase_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_Set) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Set: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Set: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &JSONElementSimple{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_Add) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Add: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Add: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevCreatedAt == nil {
				m.PrevCreatedAt = &TimeTicket{}
			}
			if err := m.PrevCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &JSONElementSimple{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_Move) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Move: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Move: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevCreatedAt == nil {
				m.PrevCreatedAt = &TimeTicket{}
			}
			if err := m.PrevCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_Remove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Remove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Remove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_Edit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &TextNodePos{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &TextNodePos{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMapByActor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAtMapByActor == nil {
				m.CreatedAtMapByActor = make(map[string]*TimeTicket)
			}
			var mapkey string
			var mapvalue *TimeTicket
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYorkie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthYorkie
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthYorkie
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TimeTicket{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYorkie(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthYorkie
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CreatedAtMapByActor[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_Select) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Select: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Select: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &TextNodePos{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &TextNodePos{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_RichEdit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RichEdit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RichEdit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &TextNodePos{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &TextNodePos{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMapByActor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAtMapByActor == nil {
				m.CreatedAtMapByActor = make(map[string]*TimeTicket)
			}
			var mapkey string
			var mapvalue *TimeTicket
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYorkie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthYorkie
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthYorkie
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TimeTicket{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYorkie(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthYorkie
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CreatedAtMapByActor[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYorkie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYorkie(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthYorkie
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_Style) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Style: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Style: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &TextNodePos{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &TextNodePos{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYorkie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYorkie(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthYorkie
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation_Increase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Increase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Increase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentCreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentCreatedAt == nil {
				m.ParentCreatedAt = &TimeTicket{}
			}
			if err := m.ParentCreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &JSONElementSimple{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutedAt == nil {
				m.ExecutedAt = &TimeTicket{}
			}
			if err := m.ExecutedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSONElementSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JSONElementSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JSONElementSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MovedAt == nil {
				m.MovedAt = &TimeTicket{}
			}
			if err := m.MovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSONElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JSONElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JSONElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonObject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JSONElement_JSONObject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &JSONElement_JsonObject{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JSONElement_JSONArray{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &JSONElement_JsonArray{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primitive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JSONElement_Primitive{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &JSONElement_Primitive_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JSONElement_Text{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &JSONElement_Text_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RichText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JSONElement_RichText{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &JSONElement_RichText_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JSONElement_Counter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &JSONElement_Counter_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSONElement_JSONObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JSONObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JSONObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &RHTNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MovedAt == nil {
				m.MovedAt = &TimeTicket{}
			}
			if err := m.MovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSONElement_JSONArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JSONArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JSONArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &RGANode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MovedAt == nil {
				m.MovedAt = &TimeTicket{}
			}
			if err := m.MovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSONElement_Primitive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Primitive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Primitive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MovedAt == nil {
				m.MovedAt = &TimeTicket{}
			}
			if err := m.MovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSONElement_Text) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Text: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Text: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &TextNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MovedAt == nil {
				m.MovedAt = &TimeTicket{}
			}
			if err := m.MovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSONElement_RichText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RichText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RichText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &RichTextNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MovedAt == nil {
				m.MovedAt = &TimeTicket{}
			}
			if err := m.MovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JSONElement_Counter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Counter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Counter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MovedAt == nil {
				m.MovedAt = &TimeTicket{}
			}
			if err := m.MovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RHTNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RHTNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RHTNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Element == nil {
				m.Element = &JSONElement{}
			}
			if err := m.Element.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RGANode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RGANode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RGANode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Next == nil {
				m.Next = &RGANode{}
			}
			if err := m.Next.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Element == nil {
				m.Element = &JSONElement{}
			}
			if err := m.Element.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &TextNodeID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsPrevId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InsPrevId == nil {
				m.InsPrevId = &TextNodeID{}
			}
			if err := m.InsPrevId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RichTextNodeAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RichTextNodeAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RichTextNodeAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombinedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &TimeTicket{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RichTextNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RichTextNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RichTextNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &TextNodeID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]*RichTextNodeAttr)
			}
			var mapkey string
			var mapvalue *RichTextNodeAttr
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYorkie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthYorkie
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthYorkie
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RichTextNodeAttr{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYorkie(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthYorkie
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemovedAt == nil {
				m.RemovedAt = &TimeTicket{}
			}
			if err := m.RemovedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsPrevId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InsPrevId == nil {
				m.InsPrevId = &TextNodeID{}
			}
			if err := m.InsPrevId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextNodeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextNodeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextNodeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYorkie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYorkie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthYorkie
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthYorkie
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipYorkie(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthYorkie
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clients) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clients: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clients: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clients = append(m.Clients, &Client{})
			if err := m.Clients[len(m.Clients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Document = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Checkpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checkpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checkpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerSeq", wireType)
			}
			m.ServerSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSeq", wireType)
			}
			m.ClientSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextNodePos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextNodePos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextNodePos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeTicket{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeOffset", wireType)
			}
			m.RelativeOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelativeOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeTicket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeTicket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeTicket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lamport", wireType)
			}
			m.Lamport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lamport |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delimiter", wireType)
			}
			m.Delimiter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delimiter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActorId = append(m.ActorId[:0], dAtA[iNdEx:postIndex]...)
			if m.ActorId == nil {
				m.ActorId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DocEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publisher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Publisher == nil {
				m.Publisher = &Client{}
			}
			if err := m.Publisher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYorkie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYorkie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentKeys = append(m.DocumentKeys, &DocumentKey{})
			if err := m.DocumentKeys[len(m.DocumentKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYorkie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYorkie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYorkie(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYorkie
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYorkie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYorkie
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYorkie
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYorkie
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYorkie        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYorkie          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYorkie = fmt.Errorf("proto: unexpected end of group")
)
