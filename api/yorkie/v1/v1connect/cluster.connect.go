//
// Copyright 2024 The Yorkie Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: yorkie/v1/cluster.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yorkie-team/yorkie/api/yorkie/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "yorkie.v1.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceDetachDocumentProcedure is the fully-qualified name of the ClusterService's
	// DetachDocument RPC.
	ClusterServiceDetachDocumentProcedure = "/yorkie.v1.ClusterService/DetachDocument"
	// ClusterServiceCompactDocumentProcedure is the fully-qualified name of the ClusterService's
	// CompactDocument RPC.
	ClusterServiceCompactDocumentProcedure = "/yorkie.v1.ClusterService/CompactDocument"
	// ClusterServicePurgeDocumentProcedure is the fully-qualified name of the ClusterService's
	// PurgeDocument RPC.
	ClusterServicePurgeDocumentProcedure = "/yorkie.v1.ClusterService/PurgeDocument"
	// ClusterServiceGetDocumentProcedure is the fully-qualified name of the ClusterService's
	// GetDocument RPC.
	ClusterServiceGetDocumentProcedure = "/yorkie.v1.ClusterService/GetDocument"
)

// ClusterServiceClient is a client for the yorkie.v1.ClusterService service.
type ClusterServiceClient interface {
	DetachDocument(context.Context, *connect.Request[v1.ClusterServiceDetachDocumentRequest]) (*connect.Response[v1.ClusterServiceDetachDocumentResponse], error)
	CompactDocument(context.Context, *connect.Request[v1.ClusterServiceCompactDocumentRequest]) (*connect.Response[v1.ClusterServiceCompactDocumentResponse], error)
	PurgeDocument(context.Context, *connect.Request[v1.ClusterServicePurgeDocumentRequest]) (*connect.Response[v1.ClusterServicePurgeDocumentResponse], error)
	GetDocument(context.Context, *connect.Request[v1.ClusterServiceGetDocumentRequest]) (*connect.Response[v1.ClusterServiceGetDocumentResponse], error)
}

// NewClusterServiceClient constructs a client for the yorkie.v1.ClusterService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterServiceClient{
		detachDocument: connect.NewClient[v1.ClusterServiceDetachDocumentRequest, v1.ClusterServiceDetachDocumentResponse](
			httpClient,
			baseURL+ClusterServiceDetachDocumentProcedure,
			opts...,
		),
		compactDocument: connect.NewClient[v1.ClusterServiceCompactDocumentRequest, v1.ClusterServiceCompactDocumentResponse](
			httpClient,
			baseURL+ClusterServiceCompactDocumentProcedure,
			opts...,
		),
		purgeDocument: connect.NewClient[v1.ClusterServicePurgeDocumentRequest, v1.ClusterServicePurgeDocumentResponse](
			httpClient,
			baseURL+ClusterServicePurgeDocumentProcedure,
			opts...,
		),
		getDocument: connect.NewClient[v1.ClusterServiceGetDocumentRequest, v1.ClusterServiceGetDocumentResponse](
			httpClient,
			baseURL+ClusterServiceGetDocumentProcedure,
			opts...,
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	detachDocument  *connect.Client[v1.ClusterServiceDetachDocumentRequest, v1.ClusterServiceDetachDocumentResponse]
	compactDocument *connect.Client[v1.ClusterServiceCompactDocumentRequest, v1.ClusterServiceCompactDocumentResponse]
	purgeDocument   *connect.Client[v1.ClusterServicePurgeDocumentRequest, v1.ClusterServicePurgeDocumentResponse]
	getDocument     *connect.Client[v1.ClusterServiceGetDocumentRequest, v1.ClusterServiceGetDocumentResponse]
}

// DetachDocument calls yorkie.v1.ClusterService.DetachDocument.
func (c *clusterServiceClient) DetachDocument(ctx context.Context, req *connect.Request[v1.ClusterServiceDetachDocumentRequest]) (*connect.Response[v1.ClusterServiceDetachDocumentResponse], error) {
	return c.detachDocument.CallUnary(ctx, req)
}

// CompactDocument calls yorkie.v1.ClusterService.CompactDocument.
func (c *clusterServiceClient) CompactDocument(ctx context.Context, req *connect.Request[v1.ClusterServiceCompactDocumentRequest]) (*connect.Response[v1.ClusterServiceCompactDocumentResponse], error) {
	return c.compactDocument.CallUnary(ctx, req)
}

// PurgeDocument calls yorkie.v1.ClusterService.PurgeDocument.
func (c *clusterServiceClient) PurgeDocument(ctx context.Context, req *connect.Request[v1.ClusterServicePurgeDocumentRequest]) (*connect.Response[v1.ClusterServicePurgeDocumentResponse], error) {
	return c.purgeDocument.CallUnary(ctx, req)
}

// GetDocument calls yorkie.v1.ClusterService.GetDocument.
func (c *clusterServiceClient) GetDocument(ctx context.Context, req *connect.Request[v1.ClusterServiceGetDocumentRequest]) (*connect.Response[v1.ClusterServiceGetDocumentResponse], error) {
	return c.getDocument.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the yorkie.v1.ClusterService service.
type ClusterServiceHandler interface {
	DetachDocument(context.Context, *connect.Request[v1.ClusterServiceDetachDocumentRequest]) (*connect.Response[v1.ClusterServiceDetachDocumentResponse], error)
	CompactDocument(context.Context, *connect.Request[v1.ClusterServiceCompactDocumentRequest]) (*connect.Response[v1.ClusterServiceCompactDocumentResponse], error)
	PurgeDocument(context.Context, *connect.Request[v1.ClusterServicePurgeDocumentRequest]) (*connect.Response[v1.ClusterServicePurgeDocumentResponse], error)
	GetDocument(context.Context, *connect.Request[v1.ClusterServiceGetDocumentRequest]) (*connect.Response[v1.ClusterServiceGetDocumentResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceDetachDocumentHandler := connect.NewUnaryHandler(
		ClusterServiceDetachDocumentProcedure,
		svc.DetachDocument,
		opts...,
	)
	clusterServiceCompactDocumentHandler := connect.NewUnaryHandler(
		ClusterServiceCompactDocumentProcedure,
		svc.CompactDocument,
		opts...,
	)
	clusterServicePurgeDocumentHandler := connect.NewUnaryHandler(
		ClusterServicePurgeDocumentProcedure,
		svc.PurgeDocument,
		opts...,
	)
	clusterServiceGetDocumentHandler := connect.NewUnaryHandler(
		ClusterServiceGetDocumentProcedure,
		svc.GetDocument,
		opts...,
	)
	return "/yorkie.v1.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceDetachDocumentProcedure:
			clusterServiceDetachDocumentHandler.ServeHTTP(w, r)
		case ClusterServiceCompactDocumentProcedure:
			clusterServiceCompactDocumentHandler.ServeHTTP(w, r)
		case ClusterServicePurgeDocumentProcedure:
			clusterServicePurgeDocumentHandler.ServeHTTP(w, r)
		case ClusterServiceGetDocumentProcedure:
			clusterServiceGetDocumentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) DetachDocument(context.Context, *connect.Request[v1.ClusterServiceDetachDocumentRequest]) (*connect.Response[v1.ClusterServiceDetachDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.ClusterService.DetachDocument is not implemented"))
}

func (UnimplementedClusterServiceHandler) CompactDocument(context.Context, *connect.Request[v1.ClusterServiceCompactDocumentRequest]) (*connect.Response[v1.ClusterServiceCompactDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.ClusterService.CompactDocument is not implemented"))
}

func (UnimplementedClusterServiceHandler) PurgeDocument(context.Context, *connect.Request[v1.ClusterServicePurgeDocumentRequest]) (*connect.Response[v1.ClusterServicePurgeDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.ClusterService.PurgeDocument is not implemented"))
}

func (UnimplementedClusterServiceHandler) GetDocument(context.Context, *connect.Request[v1.ClusterServiceGetDocumentRequest]) (*connect.Response[v1.ClusterServiceGetDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.ClusterService.GetDocument is not implemented"))
}
