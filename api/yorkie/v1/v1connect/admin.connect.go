//
// Copyright 2022 The Yorkie Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: yorkie/v1/admin.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yorkie-team/yorkie/api/yorkie/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "yorkie.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceSignUpProcedure is the fully-qualified name of the AdminService's SignUp RPC.
	AdminServiceSignUpProcedure = "/yorkie.v1.AdminService/SignUp"
	// AdminServiceLogInProcedure is the fully-qualified name of the AdminService's LogIn RPC.
	AdminServiceLogInProcedure = "/yorkie.v1.AdminService/LogIn"
	// AdminServiceDeleteAccountProcedure is the fully-qualified name of the AdminService's
	// DeleteAccount RPC.
	AdminServiceDeleteAccountProcedure = "/yorkie.v1.AdminService/DeleteAccount"
	// AdminServiceChangePasswordProcedure is the fully-qualified name of the AdminService's
	// ChangePassword RPC.
	AdminServiceChangePasswordProcedure = "/yorkie.v1.AdminService/ChangePassword"
	// AdminServiceCreateProjectProcedure is the fully-qualified name of the AdminService's
	// CreateProject RPC.
	AdminServiceCreateProjectProcedure = "/yorkie.v1.AdminService/CreateProject"
	// AdminServiceListProjectsProcedure is the fully-qualified name of the AdminService's ListProjects
	// RPC.
	AdminServiceListProjectsProcedure = "/yorkie.v1.AdminService/ListProjects"
	// AdminServiceGetProjectProcedure is the fully-qualified name of the AdminService's GetProject RPC.
	AdminServiceGetProjectProcedure = "/yorkie.v1.AdminService/GetProject"
	// AdminServiceGetProjectStatsProcedure is the fully-qualified name of the AdminService's
	// GetProjectStats RPC.
	AdminServiceGetProjectStatsProcedure = "/yorkie.v1.AdminService/GetProjectStats"
	// AdminServiceUpdateProjectProcedure is the fully-qualified name of the AdminService's
	// UpdateProject RPC.
	AdminServiceUpdateProjectProcedure = "/yorkie.v1.AdminService/UpdateProject"
	// AdminServiceCreateDocumentProcedure is the fully-qualified name of the AdminService's
	// CreateDocument RPC.
	AdminServiceCreateDocumentProcedure = "/yorkie.v1.AdminService/CreateDocument"
	// AdminServiceListDocumentsProcedure is the fully-qualified name of the AdminService's
	// ListDocuments RPC.
	AdminServiceListDocumentsProcedure = "/yorkie.v1.AdminService/ListDocuments"
	// AdminServiceGetDocumentProcedure is the fully-qualified name of the AdminService's GetDocument
	// RPC.
	AdminServiceGetDocumentProcedure = "/yorkie.v1.AdminService/GetDocument"
	// AdminServiceGetDocumentsProcedure is the fully-qualified name of the AdminService's GetDocuments
	// RPC.
	AdminServiceGetDocumentsProcedure = "/yorkie.v1.AdminService/GetDocuments"
	// AdminServiceUpdateDocumentProcedure is the fully-qualified name of the AdminService's
	// UpdateDocument RPC.
	AdminServiceUpdateDocumentProcedure = "/yorkie.v1.AdminService/UpdateDocument"
	// AdminServiceRemoveDocumentByAdminProcedure is the fully-qualified name of the AdminService's
	// RemoveDocumentByAdmin RPC.
	AdminServiceRemoveDocumentByAdminProcedure = "/yorkie.v1.AdminService/RemoveDocumentByAdmin"
	// AdminServiceGetSnapshotMetaProcedure is the fully-qualified name of the AdminService's
	// GetSnapshotMeta RPC.
	AdminServiceGetSnapshotMetaProcedure = "/yorkie.v1.AdminService/GetSnapshotMeta"
	// AdminServiceSearchDocumentsProcedure is the fully-qualified name of the AdminService's
	// SearchDocuments RPC.
	AdminServiceSearchDocumentsProcedure = "/yorkie.v1.AdminService/SearchDocuments"
	// AdminServiceListChangesProcedure is the fully-qualified name of the AdminService's ListChanges
	// RPC.
	AdminServiceListChangesProcedure = "/yorkie.v1.AdminService/ListChanges"
	// AdminServiceCreateSchemaProcedure is the fully-qualified name of the AdminService's CreateSchema
	// RPC.
	AdminServiceCreateSchemaProcedure = "/yorkie.v1.AdminService/CreateSchema"
	// AdminServiceListSchemasProcedure is the fully-qualified name of the AdminService's ListSchemas
	// RPC.
	AdminServiceListSchemasProcedure = "/yorkie.v1.AdminService/ListSchemas"
	// AdminServiceGetSchemaProcedure is the fully-qualified name of the AdminService's GetSchema RPC.
	AdminServiceGetSchemaProcedure = "/yorkie.v1.AdminService/GetSchema"
	// AdminServiceGetSchemasProcedure is the fully-qualified name of the AdminService's GetSchemas RPC.
	AdminServiceGetSchemasProcedure = "/yorkie.v1.AdminService/GetSchemas"
	// AdminServiceRemoveSchemaProcedure is the fully-qualified name of the AdminService's RemoveSchema
	// RPC.
	AdminServiceRemoveSchemaProcedure = "/yorkie.v1.AdminService/RemoveSchema"
	// AdminServiceGetServerVersionProcedure is the fully-qualified name of the AdminService's
	// GetServerVersion RPC.
	AdminServiceGetServerVersionProcedure = "/yorkie.v1.AdminService/GetServerVersion"
	// AdminServiceRotateProjectKeysProcedure is the fully-qualified name of the AdminService's
	// RotateProjectKeys RPC.
	AdminServiceRotateProjectKeysProcedure = "/yorkie.v1.AdminService/RotateProjectKeys"
)

// AdminServiceClient is a client for the yorkie.v1.AdminService service.
type AdminServiceClient interface {
	SignUp(context.Context, *connect.Request[v1.SignUpRequest]) (*connect.Response[v1.SignUpResponse], error)
	LogIn(context.Context, *connect.Request[v1.LogInRequest]) (*connect.Response[v1.LogInResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	GetProjectStats(context.Context, *connect.Request[v1.GetProjectStatsRequest]) (*connect.Response[v1.GetProjectStatsResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	CreateDocument(context.Context, *connect.Request[v1.CreateDocumentRequest]) (*connect.Response[v1.CreateDocumentResponse], error)
	ListDocuments(context.Context, *connect.Request[v1.ListDocumentsRequest]) (*connect.Response[v1.ListDocumentsResponse], error)
	GetDocument(context.Context, *connect.Request[v1.GetDocumentRequest]) (*connect.Response[v1.GetDocumentResponse], error)
	GetDocuments(context.Context, *connect.Request[v1.GetDocumentsRequest]) (*connect.Response[v1.GetDocumentsResponse], error)
	UpdateDocument(context.Context, *connect.Request[v1.UpdateDocumentRequest]) (*connect.Response[v1.UpdateDocumentResponse], error)
	RemoveDocumentByAdmin(context.Context, *connect.Request[v1.RemoveDocumentByAdminRequest]) (*connect.Response[v1.RemoveDocumentByAdminResponse], error)
	GetSnapshotMeta(context.Context, *connect.Request[v1.GetSnapshotMetaRequest]) (*connect.Response[v1.GetSnapshotMetaResponse], error)
	SearchDocuments(context.Context, *connect.Request[v1.SearchDocumentsRequest]) (*connect.Response[v1.SearchDocumentsResponse], error)
	ListChanges(context.Context, *connect.Request[v1.ListChangesRequest]) (*connect.Response[v1.ListChangesResponse], error)
	CreateSchema(context.Context, *connect.Request[v1.CreateSchemaRequest]) (*connect.Response[v1.CreateSchemaResponse], error)
	ListSchemas(context.Context, *connect.Request[v1.ListSchemasRequest]) (*connect.Response[v1.ListSchemasResponse], error)
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	GetSchemas(context.Context, *connect.Request[v1.GetSchemasRequest]) (*connect.Response[v1.GetSchemasResponse], error)
	RemoveSchema(context.Context, *connect.Request[v1.RemoveSchemaRequest]) (*connect.Response[v1.RemoveSchemaResponse], error)
	GetServerVersion(context.Context, *connect.Request[v1.GetServerVersionRequest]) (*connect.Response[v1.GetServerVersionResponse], error)
	RotateProjectKeys(context.Context, *connect.Request[v1.RotateProjectKeysRequest]) (*connect.Response[v1.RotateProjectKeysResponse], error)
}

// NewAdminServiceClient constructs a client for the yorkie.v1.AdminService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		signUp: connect.NewClient[v1.SignUpRequest, v1.SignUpResponse](
			httpClient,
			baseURL+AdminServiceSignUpProcedure,
			opts...,
		),
		logIn: connect.NewClient[v1.LogInRequest, v1.LogInResponse](
			httpClient,
			baseURL+AdminServiceLogInProcedure,
			opts...,
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+AdminServiceDeleteAccountProcedure,
			opts...,
		),
		changePassword: connect.NewClient[v1.ChangePasswordRequest, v1.ChangePasswordResponse](
			httpClient,
			baseURL+AdminServiceChangePasswordProcedure,
			opts...,
		),
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.CreateProjectResponse](
			httpClient,
			baseURL+AdminServiceCreateProjectProcedure,
			opts...,
		),
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+AdminServiceListProjectsProcedure,
			opts...,
		),
		getProject: connect.NewClient[v1.GetProjectRequest, v1.GetProjectResponse](
			httpClient,
			baseURL+AdminServiceGetProjectProcedure,
			opts...,
		),
		getProjectStats: connect.NewClient[v1.GetProjectStatsRequest, v1.GetProjectStatsResponse](
			httpClient,
			baseURL+AdminServiceGetProjectStatsProcedure,
			opts...,
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.UpdateProjectResponse](
			httpClient,
			baseURL+AdminServiceUpdateProjectProcedure,
			opts...,
		),
		createDocument: connect.NewClient[v1.CreateDocumentRequest, v1.CreateDocumentResponse](
			httpClient,
			baseURL+AdminServiceCreateDocumentProcedure,
			opts...,
		),
		listDocuments: connect.NewClient[v1.ListDocumentsRequest, v1.ListDocumentsResponse](
			httpClient,
			baseURL+AdminServiceListDocumentsProcedure,
			opts...,
		),
		getDocument: connect.NewClient[v1.GetDocumentRequest, v1.GetDocumentResponse](
			httpClient,
			baseURL+AdminServiceGetDocumentProcedure,
			opts...,
		),
		getDocuments: connect.NewClient[v1.GetDocumentsRequest, v1.GetDocumentsResponse](
			httpClient,
			baseURL+AdminServiceGetDocumentsProcedure,
			opts...,
		),
		updateDocument: connect.NewClient[v1.UpdateDocumentRequest, v1.UpdateDocumentResponse](
			httpClient,
			baseURL+AdminServiceUpdateDocumentProcedure,
			opts...,
		),
		removeDocumentByAdmin: connect.NewClient[v1.RemoveDocumentByAdminRequest, v1.RemoveDocumentByAdminResponse](
			httpClient,
			baseURL+AdminServiceRemoveDocumentByAdminProcedure,
			opts...,
		),
		getSnapshotMeta: connect.NewClient[v1.GetSnapshotMetaRequest, v1.GetSnapshotMetaResponse](
			httpClient,
			baseURL+AdminServiceGetSnapshotMetaProcedure,
			opts...,
		),
		searchDocuments: connect.NewClient[v1.SearchDocumentsRequest, v1.SearchDocumentsResponse](
			httpClient,
			baseURL+AdminServiceSearchDocumentsProcedure,
			opts...,
		),
		listChanges: connect.NewClient[v1.ListChangesRequest, v1.ListChangesResponse](
			httpClient,
			baseURL+AdminServiceListChangesProcedure,
			opts...,
		),
		createSchema: connect.NewClient[v1.CreateSchemaRequest, v1.CreateSchemaResponse](
			httpClient,
			baseURL+AdminServiceCreateSchemaProcedure,
			opts...,
		),
		listSchemas: connect.NewClient[v1.ListSchemasRequest, v1.ListSchemasResponse](
			httpClient,
			baseURL+AdminServiceListSchemasProcedure,
			opts...,
		),
		getSchema: connect.NewClient[v1.GetSchemaRequest, v1.GetSchemaResponse](
			httpClient,
			baseURL+AdminServiceGetSchemaProcedure,
			opts...,
		),
		getSchemas: connect.NewClient[v1.GetSchemasRequest, v1.GetSchemasResponse](
			httpClient,
			baseURL+AdminServiceGetSchemasProcedure,
			opts...,
		),
		removeSchema: connect.NewClient[v1.RemoveSchemaRequest, v1.RemoveSchemaResponse](
			httpClient,
			baseURL+AdminServiceRemoveSchemaProcedure,
			opts...,
		),
		getServerVersion: connect.NewClient[v1.GetServerVersionRequest, v1.GetServerVersionResponse](
			httpClient,
			baseURL+AdminServiceGetServerVersionProcedure,
			opts...,
		),
		rotateProjectKeys: connect.NewClient[v1.RotateProjectKeysRequest, v1.RotateProjectKeysResponse](
			httpClient,
			baseURL+AdminServiceRotateProjectKeysProcedure,
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	signUp                *connect.Client[v1.SignUpRequest, v1.SignUpResponse]
	logIn                 *connect.Client[v1.LogInRequest, v1.LogInResponse]
	deleteAccount         *connect.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	changePassword        *connect.Client[v1.ChangePasswordRequest, v1.ChangePasswordResponse]
	createProject         *connect.Client[v1.CreateProjectRequest, v1.CreateProjectResponse]
	listProjects          *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	getProject            *connect.Client[v1.GetProjectRequest, v1.GetProjectResponse]
	getProjectStats       *connect.Client[v1.GetProjectStatsRequest, v1.GetProjectStatsResponse]
	updateProject         *connect.Client[v1.UpdateProjectRequest, v1.UpdateProjectResponse]
	createDocument        *connect.Client[v1.CreateDocumentRequest, v1.CreateDocumentResponse]
	listDocuments         *connect.Client[v1.ListDocumentsRequest, v1.ListDocumentsResponse]
	getDocument           *connect.Client[v1.GetDocumentRequest, v1.GetDocumentResponse]
	getDocuments          *connect.Client[v1.GetDocumentsRequest, v1.GetDocumentsResponse]
	updateDocument        *connect.Client[v1.UpdateDocumentRequest, v1.UpdateDocumentResponse]
	removeDocumentByAdmin *connect.Client[v1.RemoveDocumentByAdminRequest, v1.RemoveDocumentByAdminResponse]
	getSnapshotMeta       *connect.Client[v1.GetSnapshotMetaRequest, v1.GetSnapshotMetaResponse]
	searchDocuments       *connect.Client[v1.SearchDocumentsRequest, v1.SearchDocumentsResponse]
	listChanges           *connect.Client[v1.ListChangesRequest, v1.ListChangesResponse]
	createSchema          *connect.Client[v1.CreateSchemaRequest, v1.CreateSchemaResponse]
	listSchemas           *connect.Client[v1.ListSchemasRequest, v1.ListSchemasResponse]
	getSchema             *connect.Client[v1.GetSchemaRequest, v1.GetSchemaResponse]
	getSchemas            *connect.Client[v1.GetSchemasRequest, v1.GetSchemasResponse]
	removeSchema          *connect.Client[v1.RemoveSchemaRequest, v1.RemoveSchemaResponse]
	getServerVersion      *connect.Client[v1.GetServerVersionRequest, v1.GetServerVersionResponse]
	rotateProjectKeys     *connect.Client[v1.RotateProjectKeysRequest, v1.RotateProjectKeysResponse]
}

// SignUp calls yorkie.v1.AdminService.SignUp.
func (c *adminServiceClient) SignUp(ctx context.Context, req *connect.Request[v1.SignUpRequest]) (*connect.Response[v1.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// LogIn calls yorkie.v1.AdminService.LogIn.
func (c *adminServiceClient) LogIn(ctx context.Context, req *connect.Request[v1.LogInRequest]) (*connect.Response[v1.LogInResponse], error) {
	return c.logIn.CallUnary(ctx, req)
}

// DeleteAccount calls yorkie.v1.AdminService.DeleteAccount.
func (c *adminServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// ChangePassword calls yorkie.v1.AdminService.ChangePassword.
func (c *adminServiceClient) ChangePassword(ctx context.Context, req *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// CreateProject calls yorkie.v1.AdminService.CreateProject.
func (c *adminServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// ListProjects calls yorkie.v1.AdminService.ListProjects.
func (c *adminServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// GetProject calls yorkie.v1.AdminService.GetProject.
func (c *adminServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// GetProjectStats calls yorkie.v1.AdminService.GetProjectStats.
func (c *adminServiceClient) GetProjectStats(ctx context.Context, req *connect.Request[v1.GetProjectStatsRequest]) (*connect.Response[v1.GetProjectStatsResponse], error) {
	return c.getProjectStats.CallUnary(ctx, req)
}

// UpdateProject calls yorkie.v1.AdminService.UpdateProject.
func (c *adminServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// CreateDocument calls yorkie.v1.AdminService.CreateDocument.
func (c *adminServiceClient) CreateDocument(ctx context.Context, req *connect.Request[v1.CreateDocumentRequest]) (*connect.Response[v1.CreateDocumentResponse], error) {
	return c.createDocument.CallUnary(ctx, req)
}

// ListDocuments calls yorkie.v1.AdminService.ListDocuments.
func (c *adminServiceClient) ListDocuments(ctx context.Context, req *connect.Request[v1.ListDocumentsRequest]) (*connect.Response[v1.ListDocumentsResponse], error) {
	return c.listDocuments.CallUnary(ctx, req)
}

// GetDocument calls yorkie.v1.AdminService.GetDocument.
func (c *adminServiceClient) GetDocument(ctx context.Context, req *connect.Request[v1.GetDocumentRequest]) (*connect.Response[v1.GetDocumentResponse], error) {
	return c.getDocument.CallUnary(ctx, req)
}

// GetDocuments calls yorkie.v1.AdminService.GetDocuments.
func (c *adminServiceClient) GetDocuments(ctx context.Context, req *connect.Request[v1.GetDocumentsRequest]) (*connect.Response[v1.GetDocumentsResponse], error) {
	return c.getDocuments.CallUnary(ctx, req)
}

// UpdateDocument calls yorkie.v1.AdminService.UpdateDocument.
func (c *adminServiceClient) UpdateDocument(ctx context.Context, req *connect.Request[v1.UpdateDocumentRequest]) (*connect.Response[v1.UpdateDocumentResponse], error) {
	return c.updateDocument.CallUnary(ctx, req)
}

// RemoveDocumentByAdmin calls yorkie.v1.AdminService.RemoveDocumentByAdmin.
func (c *adminServiceClient) RemoveDocumentByAdmin(ctx context.Context, req *connect.Request[v1.RemoveDocumentByAdminRequest]) (*connect.Response[v1.RemoveDocumentByAdminResponse], error) {
	return c.removeDocumentByAdmin.CallUnary(ctx, req)
}

// GetSnapshotMeta calls yorkie.v1.AdminService.GetSnapshotMeta.
func (c *adminServiceClient) GetSnapshotMeta(ctx context.Context, req *connect.Request[v1.GetSnapshotMetaRequest]) (*connect.Response[v1.GetSnapshotMetaResponse], error) {
	return c.getSnapshotMeta.CallUnary(ctx, req)
}

// SearchDocuments calls yorkie.v1.AdminService.SearchDocuments.
func (c *adminServiceClient) SearchDocuments(ctx context.Context, req *connect.Request[v1.SearchDocumentsRequest]) (*connect.Response[v1.SearchDocumentsResponse], error) {
	return c.searchDocuments.CallUnary(ctx, req)
}

// ListChanges calls yorkie.v1.AdminService.ListChanges.
func (c *adminServiceClient) ListChanges(ctx context.Context, req *connect.Request[v1.ListChangesRequest]) (*connect.Response[v1.ListChangesResponse], error) {
	return c.listChanges.CallUnary(ctx, req)
}

// CreateSchema calls yorkie.v1.AdminService.CreateSchema.
func (c *adminServiceClient) CreateSchema(ctx context.Context, req *connect.Request[v1.CreateSchemaRequest]) (*connect.Response[v1.CreateSchemaResponse], error) {
	return c.createSchema.CallUnary(ctx, req)
}

// ListSchemas calls yorkie.v1.AdminService.ListSchemas.
func (c *adminServiceClient) ListSchemas(ctx context.Context, req *connect.Request[v1.ListSchemasRequest]) (*connect.Response[v1.ListSchemasResponse], error) {
	return c.listSchemas.CallUnary(ctx, req)
}

// GetSchema calls yorkie.v1.AdminService.GetSchema.
func (c *adminServiceClient) GetSchema(ctx context.Context, req *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetSchemas calls yorkie.v1.AdminService.GetSchemas.
func (c *adminServiceClient) GetSchemas(ctx context.Context, req *connect.Request[v1.GetSchemasRequest]) (*connect.Response[v1.GetSchemasResponse], error) {
	return c.getSchemas.CallUnary(ctx, req)
}

// RemoveSchema calls yorkie.v1.AdminService.RemoveSchema.
func (c *adminServiceClient) RemoveSchema(ctx context.Context, req *connect.Request[v1.RemoveSchemaRequest]) (*connect.Response[v1.RemoveSchemaResponse], error) {
	return c.removeSchema.CallUnary(ctx, req)
}

// GetServerVersion calls yorkie.v1.AdminService.GetServerVersion.
func (c *adminServiceClient) GetServerVersion(ctx context.Context, req *connect.Request[v1.GetServerVersionRequest]) (*connect.Response[v1.GetServerVersionResponse], error) {
	return c.getServerVersion.CallUnary(ctx, req)
}

// RotateProjectKeys calls yorkie.v1.AdminService.RotateProjectKeys.
func (c *adminServiceClient) RotateProjectKeys(ctx context.Context, req *connect.Request[v1.RotateProjectKeysRequest]) (*connect.Response[v1.RotateProjectKeysResponse], error) {
	return c.rotateProjectKeys.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the yorkie.v1.AdminService service.
type AdminServiceHandler interface {
	SignUp(context.Context, *connect.Request[v1.SignUpRequest]) (*connect.Response[v1.SignUpResponse], error)
	LogIn(context.Context, *connect.Request[v1.LogInRequest]) (*connect.Response[v1.LogInResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error)
	GetProjectStats(context.Context, *connect.Request[v1.GetProjectStatsRequest]) (*connect.Response[v1.GetProjectStatsResponse], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error)
	CreateDocument(context.Context, *connect.Request[v1.CreateDocumentRequest]) (*connect.Response[v1.CreateDocumentResponse], error)
	ListDocuments(context.Context, *connect.Request[v1.ListDocumentsRequest]) (*connect.Response[v1.ListDocumentsResponse], error)
	GetDocument(context.Context, *connect.Request[v1.GetDocumentRequest]) (*connect.Response[v1.GetDocumentResponse], error)
	GetDocuments(context.Context, *connect.Request[v1.GetDocumentsRequest]) (*connect.Response[v1.GetDocumentsResponse], error)
	UpdateDocument(context.Context, *connect.Request[v1.UpdateDocumentRequest]) (*connect.Response[v1.UpdateDocumentResponse], error)
	RemoveDocumentByAdmin(context.Context, *connect.Request[v1.RemoveDocumentByAdminRequest]) (*connect.Response[v1.RemoveDocumentByAdminResponse], error)
	GetSnapshotMeta(context.Context, *connect.Request[v1.GetSnapshotMetaRequest]) (*connect.Response[v1.GetSnapshotMetaResponse], error)
	SearchDocuments(context.Context, *connect.Request[v1.SearchDocumentsRequest]) (*connect.Response[v1.SearchDocumentsResponse], error)
	ListChanges(context.Context, *connect.Request[v1.ListChangesRequest]) (*connect.Response[v1.ListChangesResponse], error)
	CreateSchema(context.Context, *connect.Request[v1.CreateSchemaRequest]) (*connect.Response[v1.CreateSchemaResponse], error)
	ListSchemas(context.Context, *connect.Request[v1.ListSchemasRequest]) (*connect.Response[v1.ListSchemasResponse], error)
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	GetSchemas(context.Context, *connect.Request[v1.GetSchemasRequest]) (*connect.Response[v1.GetSchemasResponse], error)
	RemoveSchema(context.Context, *connect.Request[v1.RemoveSchemaRequest]) (*connect.Response[v1.RemoveSchemaResponse], error)
	GetServerVersion(context.Context, *connect.Request[v1.GetServerVersionRequest]) (*connect.Response[v1.GetServerVersionResponse], error)
	RotateProjectKeys(context.Context, *connect.Request[v1.RotateProjectKeysRequest]) (*connect.Response[v1.RotateProjectKeysResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceSignUpHandler := connect.NewUnaryHandler(
		AdminServiceSignUpProcedure,
		svc.SignUp,
		opts...,
	)
	adminServiceLogInHandler := connect.NewUnaryHandler(
		AdminServiceLogInProcedure,
		svc.LogIn,
		opts...,
	)
	adminServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AdminServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		opts...,
	)
	adminServiceChangePasswordHandler := connect.NewUnaryHandler(
		AdminServiceChangePasswordProcedure,
		svc.ChangePassword,
		opts...,
	)
	adminServiceCreateProjectHandler := connect.NewUnaryHandler(
		AdminServiceCreateProjectProcedure,
		svc.CreateProject,
		opts...,
	)
	adminServiceListProjectsHandler := connect.NewUnaryHandler(
		AdminServiceListProjectsProcedure,
		svc.ListProjects,
		opts...,
	)
	adminServiceGetProjectHandler := connect.NewUnaryHandler(
		AdminServiceGetProjectProcedure,
		svc.GetProject,
		opts...,
	)
	adminServiceGetProjectStatsHandler := connect.NewUnaryHandler(
		AdminServiceGetProjectStatsProcedure,
		svc.GetProjectStats,
		opts...,
	)
	adminServiceUpdateProjectHandler := connect.NewUnaryHandler(
		AdminServiceUpdateProjectProcedure,
		svc.UpdateProject,
		opts...,
	)
	adminServiceCreateDocumentHandler := connect.NewUnaryHandler(
		AdminServiceCreateDocumentProcedure,
		svc.CreateDocument,
		opts...,
	)
	adminServiceListDocumentsHandler := connect.NewUnaryHandler(
		AdminServiceListDocumentsProcedure,
		svc.ListDocuments,
		opts...,
	)
	adminServiceGetDocumentHandler := connect.NewUnaryHandler(
		AdminServiceGetDocumentProcedure,
		svc.GetDocument,
		opts...,
	)
	adminServiceGetDocumentsHandler := connect.NewUnaryHandler(
		AdminServiceGetDocumentsProcedure,
		svc.GetDocuments,
		opts...,
	)
	adminServiceUpdateDocumentHandler := connect.NewUnaryHandler(
		AdminServiceUpdateDocumentProcedure,
		svc.UpdateDocument,
		opts...,
	)
	adminServiceRemoveDocumentByAdminHandler := connect.NewUnaryHandler(
		AdminServiceRemoveDocumentByAdminProcedure,
		svc.RemoveDocumentByAdmin,
		opts...,
	)
	adminServiceGetSnapshotMetaHandler := connect.NewUnaryHandler(
		AdminServiceGetSnapshotMetaProcedure,
		svc.GetSnapshotMeta,
		opts...,
	)
	adminServiceSearchDocumentsHandler := connect.NewUnaryHandler(
		AdminServiceSearchDocumentsProcedure,
		svc.SearchDocuments,
		opts...,
	)
	adminServiceListChangesHandler := connect.NewUnaryHandler(
		AdminServiceListChangesProcedure,
		svc.ListChanges,
		opts...,
	)
	adminServiceCreateSchemaHandler := connect.NewUnaryHandler(
		AdminServiceCreateSchemaProcedure,
		svc.CreateSchema,
		opts...,
	)
	adminServiceListSchemasHandler := connect.NewUnaryHandler(
		AdminServiceListSchemasProcedure,
		svc.ListSchemas,
		opts...,
	)
	adminServiceGetSchemaHandler := connect.NewUnaryHandler(
		AdminServiceGetSchemaProcedure,
		svc.GetSchema,
		opts...,
	)
	adminServiceGetSchemasHandler := connect.NewUnaryHandler(
		AdminServiceGetSchemasProcedure,
		svc.GetSchemas,
		opts...,
	)
	adminServiceRemoveSchemaHandler := connect.NewUnaryHandler(
		AdminServiceRemoveSchemaProcedure,
		svc.RemoveSchema,
		opts...,
	)
	adminServiceGetServerVersionHandler := connect.NewUnaryHandler(
		AdminServiceGetServerVersionProcedure,
		svc.GetServerVersion,
		opts...,
	)
	adminServiceRotateProjectKeysHandler := connect.NewUnaryHandler(
		AdminServiceRotateProjectKeysProcedure,
		svc.RotateProjectKeys,
		opts...,
	)
	return "/yorkie.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceSignUpProcedure:
			adminServiceSignUpHandler.ServeHTTP(w, r)
		case AdminServiceLogInProcedure:
			adminServiceLogInHandler.ServeHTTP(w, r)
		case AdminServiceDeleteAccountProcedure:
			adminServiceDeleteAccountHandler.ServeHTTP(w, r)
		case AdminServiceChangePasswordProcedure:
			adminServiceChangePasswordHandler.ServeHTTP(w, r)
		case AdminServiceCreateProjectProcedure:
			adminServiceCreateProjectHandler.ServeHTTP(w, r)
		case AdminServiceListProjectsProcedure:
			adminServiceListProjectsHandler.ServeHTTP(w, r)
		case AdminServiceGetProjectProcedure:
			adminServiceGetProjectHandler.ServeHTTP(w, r)
		case AdminServiceGetProjectStatsProcedure:
			adminServiceGetProjectStatsHandler.ServeHTTP(w, r)
		case AdminServiceUpdateProjectProcedure:
			adminServiceUpdateProjectHandler.ServeHTTP(w, r)
		case AdminServiceCreateDocumentProcedure:
			adminServiceCreateDocumentHandler.ServeHTTP(w, r)
		case AdminServiceListDocumentsProcedure:
			adminServiceListDocumentsHandler.ServeHTTP(w, r)
		case AdminServiceGetDocumentProcedure:
			adminServiceGetDocumentHandler.ServeHTTP(w, r)
		case AdminServiceGetDocumentsProcedure:
			adminServiceGetDocumentsHandler.ServeHTTP(w, r)
		case AdminServiceUpdateDocumentProcedure:
			adminServiceUpdateDocumentHandler.ServeHTTP(w, r)
		case AdminServiceRemoveDocumentByAdminProcedure:
			adminServiceRemoveDocumentByAdminHandler.ServeHTTP(w, r)
		case AdminServiceGetSnapshotMetaProcedure:
			adminServiceGetSnapshotMetaHandler.ServeHTTP(w, r)
		case AdminServiceSearchDocumentsProcedure:
			adminServiceSearchDocumentsHandler.ServeHTTP(w, r)
		case AdminServiceListChangesProcedure:
			adminServiceListChangesHandler.ServeHTTP(w, r)
		case AdminServiceCreateSchemaProcedure:
			adminServiceCreateSchemaHandler.ServeHTTP(w, r)
		case AdminServiceListSchemasProcedure:
			adminServiceListSchemasHandler.ServeHTTP(w, r)
		case AdminServiceGetSchemaProcedure:
			adminServiceGetSchemaHandler.ServeHTTP(w, r)
		case AdminServiceGetSchemasProcedure:
			adminServiceGetSchemasHandler.ServeHTTP(w, r)
		case AdminServiceRemoveSchemaProcedure:
			adminServiceRemoveSchemaHandler.ServeHTTP(w, r)
		case AdminServiceGetServerVersionProcedure:
			adminServiceGetServerVersionHandler.ServeHTTP(w, r)
		case AdminServiceRotateProjectKeysProcedure:
			adminServiceRotateProjectKeysHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) SignUp(context.Context, *connect.Request[v1.SignUpRequest]) (*connect.Response[v1.SignUpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.SignUp is not implemented"))
}

func (UnimplementedAdminServiceHandler) LogIn(context.Context, *connect.Request[v1.LogInRequest]) (*connect.Response[v1.LogInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.LogIn is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.DeleteAccount is not implemented"))
}

func (UnimplementedAdminServiceHandler) ChangePassword(context.Context, *connect.Request[v1.ChangePasswordRequest]) (*connect.Response[v1.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.ChangePassword is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.CreateProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.ListProjects is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.GetProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetProjectStats(context.Context, *connect.Request[v1.GetProjectStatsRequest]) (*connect.Response[v1.GetProjectStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.GetProjectStats is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.UpdateProject is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateDocument(context.Context, *connect.Request[v1.CreateDocumentRequest]) (*connect.Response[v1.CreateDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.CreateDocument is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListDocuments(context.Context, *connect.Request[v1.ListDocumentsRequest]) (*connect.Response[v1.ListDocumentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.ListDocuments is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDocument(context.Context, *connect.Request[v1.GetDocumentRequest]) (*connect.Response[v1.GetDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.GetDocument is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDocuments(context.Context, *connect.Request[v1.GetDocumentsRequest]) (*connect.Response[v1.GetDocumentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.GetDocuments is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateDocument(context.Context, *connect.Request[v1.UpdateDocumentRequest]) (*connect.Response[v1.UpdateDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.UpdateDocument is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveDocumentByAdmin(context.Context, *connect.Request[v1.RemoveDocumentByAdminRequest]) (*connect.Response[v1.RemoveDocumentByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.RemoveDocumentByAdmin is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSnapshotMeta(context.Context, *connect.Request[v1.GetSnapshotMetaRequest]) (*connect.Response[v1.GetSnapshotMetaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.GetSnapshotMeta is not implemented"))
}

func (UnimplementedAdminServiceHandler) SearchDocuments(context.Context, *connect.Request[v1.SearchDocumentsRequest]) (*connect.Response[v1.SearchDocumentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.SearchDocuments is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListChanges(context.Context, *connect.Request[v1.ListChangesRequest]) (*connect.Response[v1.ListChangesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.ListChanges is not implemented"))
}

func (UnimplementedAdminServiceHandler) CreateSchema(context.Context, *connect.Request[v1.CreateSchemaRequest]) (*connect.Response[v1.CreateSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.CreateSchema is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListSchemas(context.Context, *connect.Request[v1.ListSchemasRequest]) (*connect.Response[v1.ListSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.ListSchemas is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.GetSchema is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSchemas(context.Context, *connect.Request[v1.GetSchemasRequest]) (*connect.Response[v1.GetSchemasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.GetSchemas is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveSchema(context.Context, *connect.Request[v1.RemoveSchemaRequest]) (*connect.Response[v1.RemoveSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.RemoveSchema is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetServerVersion(context.Context, *connect.Request[v1.GetServerVersionRequest]) (*connect.Response[v1.GetServerVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.GetServerVersion is not implemented"))
}

func (UnimplementedAdminServiceHandler) RotateProjectKeys(context.Context, *connect.Request[v1.RotateProjectKeysRequest]) (*connect.Response[v1.RotateProjectKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.AdminService.RotateProjectKeys is not implemented"))
}
