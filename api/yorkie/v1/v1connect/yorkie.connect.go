//
// Copyright 2020 The Yorkie Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: yorkie/v1/yorkie.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yorkie-team/yorkie/api/yorkie/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// YorkieServiceName is the fully-qualified name of the YorkieService service.
	YorkieServiceName = "yorkie.v1.YorkieService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// YorkieServiceActivateClientProcedure is the fully-qualified name of the YorkieService's
	// ActivateClient RPC.
	YorkieServiceActivateClientProcedure = "/yorkie.v1.YorkieService/ActivateClient"
	// YorkieServiceDeactivateClientProcedure is the fully-qualified name of the YorkieService's
	// DeactivateClient RPC.
	YorkieServiceDeactivateClientProcedure = "/yorkie.v1.YorkieService/DeactivateClient"
	// YorkieServiceAttachDocumentProcedure is the fully-qualified name of the YorkieService's
	// AttachDocument RPC.
	YorkieServiceAttachDocumentProcedure = "/yorkie.v1.YorkieService/AttachDocument"
	// YorkieServiceDetachDocumentProcedure is the fully-qualified name of the YorkieService's
	// DetachDocument RPC.
	YorkieServiceDetachDocumentProcedure = "/yorkie.v1.YorkieService/DetachDocument"
	// YorkieServiceRemoveDocumentProcedure is the fully-qualified name of the YorkieService's
	// RemoveDocument RPC.
	YorkieServiceRemoveDocumentProcedure = "/yorkie.v1.YorkieService/RemoveDocument"
	// YorkieServicePushPullChangesProcedure is the fully-qualified name of the YorkieService's
	// PushPullChanges RPC.
	YorkieServicePushPullChangesProcedure = "/yorkie.v1.YorkieService/PushPullChanges"
	// YorkieServiceWatchDocumentProcedure is the fully-qualified name of the YorkieService's
	// WatchDocument RPC.
	YorkieServiceWatchDocumentProcedure = "/yorkie.v1.YorkieService/WatchDocument"
	// YorkieServiceBroadcastProcedure is the fully-qualified name of the YorkieService's Broadcast RPC.
	YorkieServiceBroadcastProcedure = "/yorkie.v1.YorkieService/Broadcast"
)

// YorkieServiceClient is a client for the yorkie.v1.YorkieService service.
type YorkieServiceClient interface {
	ActivateClient(context.Context, *connect.Request[v1.ActivateClientRequest]) (*connect.Response[v1.ActivateClientResponse], error)
	DeactivateClient(context.Context, *connect.Request[v1.DeactivateClientRequest]) (*connect.Response[v1.DeactivateClientResponse], error)
	AttachDocument(context.Context, *connect.Request[v1.AttachDocumentRequest]) (*connect.Response[v1.AttachDocumentResponse], error)
	DetachDocument(context.Context, *connect.Request[v1.DetachDocumentRequest]) (*connect.Response[v1.DetachDocumentResponse], error)
	RemoveDocument(context.Context, *connect.Request[v1.RemoveDocumentRequest]) (*connect.Response[v1.RemoveDocumentResponse], error)
	PushPullChanges(context.Context, *connect.Request[v1.PushPullChangesRequest]) (*connect.Response[v1.PushPullChangesResponse], error)
	WatchDocument(context.Context, *connect.Request[v1.WatchDocumentRequest]) (*connect.ServerStreamForClient[v1.WatchDocumentResponse], error)
	Broadcast(context.Context, *connect.Request[v1.BroadcastRequest]) (*connect.Response[v1.BroadcastResponse], error)
}

// NewYorkieServiceClient constructs a client for the yorkie.v1.YorkieService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewYorkieServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) YorkieServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &yorkieServiceClient{
		activateClient: connect.NewClient[v1.ActivateClientRequest, v1.ActivateClientResponse](
			httpClient,
			baseURL+YorkieServiceActivateClientProcedure,
			opts...,
		),
		deactivateClient: connect.NewClient[v1.DeactivateClientRequest, v1.DeactivateClientResponse](
			httpClient,
			baseURL+YorkieServiceDeactivateClientProcedure,
			opts...,
		),
		attachDocument: connect.NewClient[v1.AttachDocumentRequest, v1.AttachDocumentResponse](
			httpClient,
			baseURL+YorkieServiceAttachDocumentProcedure,
			opts...,
		),
		detachDocument: connect.NewClient[v1.DetachDocumentRequest, v1.DetachDocumentResponse](
			httpClient,
			baseURL+YorkieServiceDetachDocumentProcedure,
			opts...,
		),
		removeDocument: connect.NewClient[v1.RemoveDocumentRequest, v1.RemoveDocumentResponse](
			httpClient,
			baseURL+YorkieServiceRemoveDocumentProcedure,
			opts...,
		),
		pushPullChanges: connect.NewClient[v1.PushPullChangesRequest, v1.PushPullChangesResponse](
			httpClient,
			baseURL+YorkieServicePushPullChangesProcedure,
			opts...,
		),
		watchDocument: connect.NewClient[v1.WatchDocumentRequest, v1.WatchDocumentResponse](
			httpClient,
			baseURL+YorkieServiceWatchDocumentProcedure,
			opts...,
		),
		broadcast: connect.NewClient[v1.BroadcastRequest, v1.BroadcastResponse](
			httpClient,
			baseURL+YorkieServiceBroadcastProcedure,
			opts...,
		),
	}
}

// yorkieServiceClient implements YorkieServiceClient.
type yorkieServiceClient struct {
	activateClient   *connect.Client[v1.ActivateClientRequest, v1.ActivateClientResponse]
	deactivateClient *connect.Client[v1.DeactivateClientRequest, v1.DeactivateClientResponse]
	attachDocument   *connect.Client[v1.AttachDocumentRequest, v1.AttachDocumentResponse]
	detachDocument   *connect.Client[v1.DetachDocumentRequest, v1.DetachDocumentResponse]
	removeDocument   *connect.Client[v1.RemoveDocumentRequest, v1.RemoveDocumentResponse]
	pushPullChanges  *connect.Client[v1.PushPullChangesRequest, v1.PushPullChangesResponse]
	watchDocument    *connect.Client[v1.WatchDocumentRequest, v1.WatchDocumentResponse]
	broadcast        *connect.Client[v1.BroadcastRequest, v1.BroadcastResponse]
}

// ActivateClient calls yorkie.v1.YorkieService.ActivateClient.
func (c *yorkieServiceClient) ActivateClient(ctx context.Context, req *connect.Request[v1.ActivateClientRequest]) (*connect.Response[v1.ActivateClientResponse], error) {
	return c.activateClient.CallUnary(ctx, req)
}

// DeactivateClient calls yorkie.v1.YorkieService.DeactivateClient.
func (c *yorkieServiceClient) DeactivateClient(ctx context.Context, req *connect.Request[v1.DeactivateClientRequest]) (*connect.Response[v1.DeactivateClientResponse], error) {
	return c.deactivateClient.CallUnary(ctx, req)
}

// AttachDocument calls yorkie.v1.YorkieService.AttachDocument.
func (c *yorkieServiceClient) AttachDocument(ctx context.Context, req *connect.Request[v1.AttachDocumentRequest]) (*connect.Response[v1.AttachDocumentResponse], error) {
	return c.attachDocument.CallUnary(ctx, req)
}

// DetachDocument calls yorkie.v1.YorkieService.DetachDocument.
func (c *yorkieServiceClient) DetachDocument(ctx context.Context, req *connect.Request[v1.DetachDocumentRequest]) (*connect.Response[v1.DetachDocumentResponse], error) {
	return c.detachDocument.CallUnary(ctx, req)
}

// RemoveDocument calls yorkie.v1.YorkieService.RemoveDocument.
func (c *yorkieServiceClient) RemoveDocument(ctx context.Context, req *connect.Request[v1.RemoveDocumentRequest]) (*connect.Response[v1.RemoveDocumentResponse], error) {
	return c.removeDocument.CallUnary(ctx, req)
}

// PushPullChanges calls yorkie.v1.YorkieService.PushPullChanges.
func (c *yorkieServiceClient) PushPullChanges(ctx context.Context, req *connect.Request[v1.PushPullChangesRequest]) (*connect.Response[v1.PushPullChangesResponse], error) {
	return c.pushPullChanges.CallUnary(ctx, req)
}

// WatchDocument calls yorkie.v1.YorkieService.WatchDocument.
func (c *yorkieServiceClient) WatchDocument(ctx context.Context, req *connect.Request[v1.WatchDocumentRequest]) (*connect.ServerStreamForClient[v1.WatchDocumentResponse], error) {
	return c.watchDocument.CallServerStream(ctx, req)
}

// Broadcast calls yorkie.v1.YorkieService.Broadcast.
func (c *yorkieServiceClient) Broadcast(ctx context.Context, req *connect.Request[v1.BroadcastRequest]) (*connect.Response[v1.BroadcastResponse], error) {
	return c.broadcast.CallUnary(ctx, req)
}

// YorkieServiceHandler is an implementation of the yorkie.v1.YorkieService service.
type YorkieServiceHandler interface {
	ActivateClient(context.Context, *connect.Request[v1.ActivateClientRequest]) (*connect.Response[v1.ActivateClientResponse], error)
	DeactivateClient(context.Context, *connect.Request[v1.DeactivateClientRequest]) (*connect.Response[v1.DeactivateClientResponse], error)
	AttachDocument(context.Context, *connect.Request[v1.AttachDocumentRequest]) (*connect.Response[v1.AttachDocumentResponse], error)
	DetachDocument(context.Context, *connect.Request[v1.DetachDocumentRequest]) (*connect.Response[v1.DetachDocumentResponse], error)
	RemoveDocument(context.Context, *connect.Request[v1.RemoveDocumentRequest]) (*connect.Response[v1.RemoveDocumentResponse], error)
	PushPullChanges(context.Context, *connect.Request[v1.PushPullChangesRequest]) (*connect.Response[v1.PushPullChangesResponse], error)
	WatchDocument(context.Context, *connect.Request[v1.WatchDocumentRequest], *connect.ServerStream[v1.WatchDocumentResponse]) error
	Broadcast(context.Context, *connect.Request[v1.BroadcastRequest]) (*connect.Response[v1.BroadcastResponse], error)
}

// NewYorkieServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewYorkieServiceHandler(svc YorkieServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	yorkieServiceActivateClientHandler := connect.NewUnaryHandler(
		YorkieServiceActivateClientProcedure,
		svc.ActivateClient,
		opts...,
	)
	yorkieServiceDeactivateClientHandler := connect.NewUnaryHandler(
		YorkieServiceDeactivateClientProcedure,
		svc.DeactivateClient,
		opts...,
	)
	yorkieServiceAttachDocumentHandler := connect.NewUnaryHandler(
		YorkieServiceAttachDocumentProcedure,
		svc.AttachDocument,
		opts...,
	)
	yorkieServiceDetachDocumentHandler := connect.NewUnaryHandler(
		YorkieServiceDetachDocumentProcedure,
		svc.DetachDocument,
		opts...,
	)
	yorkieServiceRemoveDocumentHandler := connect.NewUnaryHandler(
		YorkieServiceRemoveDocumentProcedure,
		svc.RemoveDocument,
		opts...,
	)
	yorkieServicePushPullChangesHandler := connect.NewUnaryHandler(
		YorkieServicePushPullChangesProcedure,
		svc.PushPullChanges,
		opts...,
	)
	yorkieServiceWatchDocumentHandler := connect.NewServerStreamHandler(
		YorkieServiceWatchDocumentProcedure,
		svc.WatchDocument,
		opts...,
	)
	yorkieServiceBroadcastHandler := connect.NewUnaryHandler(
		YorkieServiceBroadcastProcedure,
		svc.Broadcast,
		opts...,
	)
	return "/yorkie.v1.YorkieService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case YorkieServiceActivateClientProcedure:
			yorkieServiceActivateClientHandler.ServeHTTP(w, r)
		case YorkieServiceDeactivateClientProcedure:
			yorkieServiceDeactivateClientHandler.ServeHTTP(w, r)
		case YorkieServiceAttachDocumentProcedure:
			yorkieServiceAttachDocumentHandler.ServeHTTP(w, r)
		case YorkieServiceDetachDocumentProcedure:
			yorkieServiceDetachDocumentHandler.ServeHTTP(w, r)
		case YorkieServiceRemoveDocumentProcedure:
			yorkieServiceRemoveDocumentHandler.ServeHTTP(w, r)
		case YorkieServicePushPullChangesProcedure:
			yorkieServicePushPullChangesHandler.ServeHTTP(w, r)
		case YorkieServiceWatchDocumentProcedure:
			yorkieServiceWatchDocumentHandler.ServeHTTP(w, r)
		case YorkieServiceBroadcastProcedure:
			yorkieServiceBroadcastHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedYorkieServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedYorkieServiceHandler struct{}

func (UnimplementedYorkieServiceHandler) ActivateClient(context.Context, *connect.Request[v1.ActivateClientRequest]) (*connect.Response[v1.ActivateClientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.YorkieService.ActivateClient is not implemented"))
}

func (UnimplementedYorkieServiceHandler) DeactivateClient(context.Context, *connect.Request[v1.DeactivateClientRequest]) (*connect.Response[v1.DeactivateClientResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.YorkieService.DeactivateClient is not implemented"))
}

func (UnimplementedYorkieServiceHandler) AttachDocument(context.Context, *connect.Request[v1.AttachDocumentRequest]) (*connect.Response[v1.AttachDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.YorkieService.AttachDocument is not implemented"))
}

func (UnimplementedYorkieServiceHandler) DetachDocument(context.Context, *connect.Request[v1.DetachDocumentRequest]) (*connect.Response[v1.DetachDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.YorkieService.DetachDocument is not implemented"))
}

func (UnimplementedYorkieServiceHandler) RemoveDocument(context.Context, *connect.Request[v1.RemoveDocumentRequest]) (*connect.Response[v1.RemoveDocumentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.YorkieService.RemoveDocument is not implemented"))
}

func (UnimplementedYorkieServiceHandler) PushPullChanges(context.Context, *connect.Request[v1.PushPullChangesRequest]) (*connect.Response[v1.PushPullChangesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.YorkieService.PushPullChanges is not implemented"))
}

func (UnimplementedYorkieServiceHandler) WatchDocument(context.Context, *connect.Request[v1.WatchDocumentRequest], *connect.ServerStream[v1.WatchDocumentResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.YorkieService.WatchDocument is not implemented"))
}

func (UnimplementedYorkieServiceHandler) Broadcast(context.Context, *connect.Request[v1.BroadcastRequest]) (*connect.Response[v1.BroadcastResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yorkie.v1.YorkieService.Broadcast is not implemented"))
}
