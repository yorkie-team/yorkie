/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package time

import (
	"bytes"
	"encoding/hex"
	"errors"
	"fmt"
	"math"
)

const actorIDSize = 12

var (
	// InitialActorID represents the initial value of ActorID.
	InitialActorID = &ActorID{}

	// MaxActorID represents the maximum value of ActorID.
	MaxActorID = &ActorID{
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
		math.MaxUint8,
	}

	// ErrInvalidHexString is returned when the given string is not valid hex.
	ErrInvalidHexString = errors.New("invalid hex string")
)

// ActorID is bytes represented by the hexadecimal string.
// It should be generated by unique value.
type ActorID [actorIDSize]byte

// ActorIDFromHex returns the bytes represented by the hexadecimal string str.
func ActorIDFromHex(str string) (*ActorID, error) {
	if str == "" {
		return nil, nil
	}

	actorID := ActorID{}
	decoded, err := hex.DecodeString(str)
	if err != nil {
		return nil, fmt.Errorf("%s: %w", str, ErrInvalidHexString)
	}

	if len(decoded) != actorIDSize {
		return nil, fmt.Errorf("decoded length %d: %w", len(decoded), ErrInvalidHexString)
	}

	copy(actorID[:], decoded[:actorIDSize])
	return &actorID, nil
}

// ActorIDFromBytes returns the bytes represented by the bytes of decoded hexadecimal string itself.
func ActorIDFromBytes(bytes []byte) (*ActorID, error) {
	if len(bytes) == 0 {
		return nil, nil
	}

	if len(bytes) != actorIDSize {
		return nil, fmt.Errorf("bytes length %d: %w", len(bytes), ErrInvalidHexString)
	}

	actorID := ActorID{}
	copy(actorID[:], bytes)
	return &actorID, nil
}

// Key returns the string of ActorID.
func (id *ActorID) Key() string {
	if id == nil {
		return ""
	}

	return string(id[:])
}

// Hex returns the hexadecimal encoding of ActorID.
// If the receiver is nil, it would return empty string.
func (id *ActorID) Hex() string {
	if id == nil {
		return ""
	}

	return hex.EncodeToString(id[:])
}

// Bytes returns the bytes of ActorID itself.
// If the receiver is nil, it would return empty array of byte.
func (id *ActorID) Bytes() []byte {
	if id == nil {
		return nil
	}

	return id[:]
}

// Compare returns an integer comparing two ActorID lexicographically.
// The result will be 0 if id==other, -1 if id < other, and +1 if id > other.
// If the receiver or argument is nil, it would panic at runtime.
func (id *ActorID) Compare(other *ActorID) int {
	if id == nil || other == nil {
		panic("actorID cannot be null")
	}

	return bytes.Compare(id[:], other[:])
}
