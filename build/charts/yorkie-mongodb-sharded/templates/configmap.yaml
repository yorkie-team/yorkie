{{- if .Values.setup }}
{{- $port := ($.Values.port | int )}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.name }}-setup-script
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/component: mongodb
    app.kubernetes.io/part-of: yorkie
data:
  setup.sh: |
    #!/bin/bash

    function waitUntilReady {
      while true; do
        mongosh $1 --quiet --eval "db.runCommand('ping').ok"
        if [ $? -eq 0 ]; then
            break
        fi    
        sleep 5
      done       
    }

    {{ $configsvrAddr := printf "%s-configsvr-0.%s-headless.%s.svc.%s:%d" $.Values.name $.Values.name $.Values.namespace $.Values.clusterDomain $port }}
    echo "Wait until config server is ready..."
    configsvrAddr="{{ $configsvrAddr }}"
    echo "Config server address: ${configsvrAddr}"
    waitUntilReady $configsvrAddr
    echo "Configure config server"
    mongosh $configsvrAddr --eval 'rs.initiate({"_id":"{{ printf "%s-configsvr" $.Values.name }}", "members":[{"_id":0,"host":"{{ $configsvrAddr }}","priority":5}]})'

    {{ range $i, $e := until ($.Values.shards | int) }}
    {{ $shardsvrAddr := printf "%s-shard%d-data-0.%s-headless.%s.svc.%s:%d" $.Values.name $i $.Values.name $.Values.namespace $.Values.clusterDomain $port }}
    echo "{{ printf "Wait until shard%d is ready..." $i }}"
    shardsvrAddr="{{ $shardsvrAddr }}"
    echo "{{ printf "Shard%d address: %s" $i $shardsvrAddr }}"
    waitUntilReady $shardsvrAddr
    echo "{{ printf "Configure shard%d" $i }}"
    mongosh $shardsvrAddr --eval 'rs.initiate({"_id":"{{ printf "%s-shard-%d" $.Values.name $i }}", "members":[{"_id":0,"host":"{{ $shardsvrAddr }}","priority":5}]})'
    {{ end }}

    {{ $mongosAddr := printf "%s-mongos-0.%s.%s.svc.%s:%d" $.Values.name $.Values.name $.Values.namespace $.Values.clusterDomain $port }}
    echo "Wait until mongos is ready..."
    mongosAddr="{{ $mongosAddr }}"
    echo "Mongos address: ${mongosAddr}"
    waitUntilReady $mongosAddr
    echo "Configure mongos"
    mongosh $mongosAddr --eval <<EOF
      {{- range $i, $e := until ($.Values.shards | int) }}
      {{- range $j, $e := until ($.Values.replicaCount.shardsvr | int) }}
      sh.addShard("{{ printf "%s-shard-%d/%s-shard%d-data-%d.%s-headless.%s.svc.%s:%d" $.Values.name $i $.Values.name $i $j $.Values.name $.Values.namespace $.Values.clusterDomain $port }}");
      {{- end }}
      {{- end }}
      sh.enableSharding("{{ .Values.setup.database }}")
      {{- range .Values.setup.rules }}
      sh.shardCollection(
        "{{ printf "%s.%s" $.Values.setup.database .collectionName }}", 
        { 
          {{- range .shardKeys }}
            {{ printf "%s: %s," .name .method }}
          {{- end }}
        }, 
        {{ .unique }}
      )
      {{- end }}
    EOF
    
    
{{ end -}}
