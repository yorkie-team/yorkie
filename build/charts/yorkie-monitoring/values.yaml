# Configuration for name of yorkie app
yorkie:
  name: yorkie
  namespace: yorkie
  profilingPort: 11102

# Configuration for monitoring system
monitoring:
  name: &monitoringName yorkie-monitoring

  enableEnhancements: &monitoringEnhancementsEnable false

# Configuration for external gateway (eg: AWS ALB)
externalGateway:
  ingressClassName: nginx
  ## Set to alb if you are using AWS ALB
  # ingressClassName: alb

  # Use same host for yorkie cluster
  apiHost: &apiHost api.yorkie.dev
  grafanaPath: /grafana

  alb:
    enabled: false

    certArn: arn:aws:acm:ap-northeast-2:123412341234:certificate/1234-1234-1234-1234-1234

# Configuration for manual prometheus monitoring stack
kube-prometheus-stack:
  nameOverride: *monitoringName
  namespaceOverride: monitoring

  # Configuration for alertmanager
  # ref: https://prometheus.io/docs/alerting/alertmanager/
  alertmanager:
    enabled: *monitoringEnhancementsEnable

  # Using default values from
  # ref: https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  grafana:
    enabled: true

    defaultDashboardsTimezone: utc
    defaultDashboardsEnabled: false
    adminPassword: yorkie

    # For grafana data persistence
    persistence:
      enabled: true
      type: pvc
      # storageClassName: k8s
      accessModes:
      - ReadWriteOnce
      size: 1Gi
      finalizers:
      - kubernetes.io/pvc-protection

    grafana.ini:
      server:
        domain: *apiHost
        root_url: "%(protocol)s://%(domain)s/grafana"
        serve_from_sub_path: true
      
      service:
        type: NodePort

  # Component scraping the kube api server
  kubeApiServer:
    enabled: *monitoringEnhancementsEnable
  
  # Component scraping the kubelet and kubelet-hosted cAdvisor
  kubelet:
    enabled: *monitoringEnhancementsEnable
  
  # Component scraping the kube controller manager
  kubeControllerManager:
    enabled: *monitoringEnhancementsEnable

  # Component scraping coreDns. Use either this or kubeDns
  coreDns:
    enabled: *monitoringEnhancementsEnable

  # Component scraping kubeDns. Use either this or coreDns
  kubeDns:
    enabled: *monitoringEnhancementsEnable

  # Component scraping etcd
  kubeEtcd:
    enabled: *monitoringEnhancementsEnable
  
  # Component scraping kube scheduler
  kubeScheduler:
    enabled: *monitoringEnhancementsEnable
  
  # Component scraping kube proxy
  kubeProxy:
    enabled: *monitoringEnhancementsEnable

  # Component scraping kube state metrics
  kubeStateMetrics:
    enabled: *monitoringEnhancementsEnable

  # Deploy node exporter as a daemonset to all nodes
  nodeExporter:
    enabled: true

  # Manages Prometheus and Alertmanager components
  prometheusOperator:
    enabled: true

  # Configuration for thanosRuler
  thanosRuler:
    enabled: *monitoringEnhancementsEnable
  
  # Deploy a Prometheus instance
  prometheus:
    enabled: true

    # Use this configuration to allow servicemonitor after helm chart creation
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false

      # Prometheus StorageSpec for persistent data
      # ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
      #
      storageSpec: {}
      # Using PersistentVolumeClaim
      #
      volumeClaimTemplate:
        spec:
          # storageClassName: gluster
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi
        selector: {}
